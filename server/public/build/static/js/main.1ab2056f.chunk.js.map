{"version":3,"sources":["components/SinewaveStream/wave-heared.js","components/SinewaveStream/utils.js","components/SinewaveStream/Container.js","components/SinewaveStream/Component.js","components/FrequencyBarsStream/utils.js","components/FrequencyBarsStream/Container.js","components/FrequencyBarsStream/Component.js","components/InfoBar/Container.js","components/InfoBar/Component.js","components/InteractWindow/Container.js","components/InteractWindow/Component.js","App.js","utils/getBackgroundColor.js","serviceWorker.js","utils/MeanSpectrumOfBreath.js","mobix/config.js","mobix/spectrum-info.js","mobix/store.js","mobix/window-info.js","index.js"],"names":["withWaveHeader","data","numberOfChannels","sampleRate","header","ArrayBuffer","d","DataView","setUint8","charCodeAt","setUint32","byteLength","setUint16","buffer1","buffer2","tmp","Uint8Array","set","buffer","concat","getByteTimeDomainData","audioCtx","analyser","fftSize","arguments","length","undefined","rate","channels","Promise","resolve","decodeAudioData","audioBuffer","source","createBufferSource","connect","bufferLength","dataArray","start","drawWave","canvasCtx","width","height","styles","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","sliceWidth","x","i","y","moveTo","lineTo","stroke","Sinewave","observer","compose","inject","branch","_ref","navigatorMicStream","R","renderNothing","withProps","_ref2","_ref2$store","store","config","spectrumInfo","mic","sinewaveScale","lifecycle","componentDidMount","_componentDidMount","Object","asyncToGenerator","regenerator_default","a","mark","_callee2","_this$props","canvas","_this","this","wrap","_context2","prev","next","props","window","AudioContext","webkitAudioContext","createAnalyser","document","querySelector","getContext","clearRect","on","_ref3","_callee","wave","_context","sent","stop","_x","apply","mapProps","sineWaveHeight","sineWaveWidth","wavesCount","react_default","createElement","className","getByteFrequencyData","drawBar","minRateDif","barHeight","barWidth","meanOfBreath","withRating","moveToLive","mean","withRatingLive","meanLine","liveLine","drawLines","FrequencyBars","setMean","alert","frequencyHeight","frequencyWidth","InfoBarContainer","timeLeft","meanOfBreathR","InfoBar","InteractWindow","windowInfo","withHandlers","onInteractWithWindowClick","interactWithWindow","onClick","url","location","hostname","port","socket","socketClient","AppBranch","isInteracted","renderComponent","ratting","console","log","getBackgroundColor","style","padding","App","withState","init","setUrl","ss","stream","setStream","setMic","device","Boolean","match","MeanSpectrumOfBreath","classCallCheck","_statOfListen","_isListening","_time","timeToListen","_means","_mean","_maxes","_max","listen","bind","meanSpectrum","maxSpectrum","Date","getTime","diffInSec","index","parseInt","push","map","staticConfig","types","model","frozen","number","string","actions","self","create","objectSpread","meanSpectrumOfBreath","max","spectrum","getMean","getTimeLeft","boolean","windowHeight","innerHeight","innerWidth","ReactDOM","render","index_module","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1ab2056f.chunk.js","sourcesContent":["const concat = (buffer1, buffer2) => {\n  const tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n\n  tmp.set(new Uint8Array(buffer1), 0);\n  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n\n  return tmp.buffer;\n};\n\n\nconst withWaveHeader = (data, numberOfChannels, sampleRate) => {\n  const header = new ArrayBuffer(44);\n\n  var d = new DataView(header);\n\n  d.setUint8(0, \"R\".charCodeAt(0));\n  d.setUint8(1, \"I\".charCodeAt(0));\n  d.setUint8(2, \"F\".charCodeAt(0));\n  d.setUint8(3, \"F\".charCodeAt(0));\n\n  d.setUint32(4, data.byteLength / 2 + 44, true);\n\n  d.setUint8(8, \"W\".charCodeAt(0));\n  d.setUint8(9, \"A\".charCodeAt(0));\n  d.setUint8(10, \"V\".charCodeAt(0));\n  d.setUint8(11, \"E\".charCodeAt(0));\n  d.setUint8(12, \"f\".charCodeAt(0));\n  d.setUint8(13, \"m\".charCodeAt(0));\n  d.setUint8(14, \"t\".charCodeAt(0));\n  d.setUint8(15, \" \".charCodeAt(0));\n\n  d.setUint32(16, 16, true);\n  d.setUint16(20, 1, true);\n  d.setUint16(22, numberOfChannels, true);\n  d.setUint32(24, sampleRate, true);\n  d.setUint32(28, sampleRate * 1 * 2);\n  d.setUint16(32, numberOfChannels * 2);\n  d.setUint16(34, 16, true);\n\n  d.setUint8(36, \"d\".charCodeAt(0));\n  d.setUint8(37, \"a\".charCodeAt(0));\n  d.setUint8(38, \"t\".charCodeAt(0));\n  d.setUint8(39, \"a\".charCodeAt(0));\n  d.setUint32(40, data.byteLength, true);\n\n  return concat(header, data);\n};\n\nexport { withWaveHeader };\n","import { withWaveHeader } from './wave-heared'\n\nconst getByteTimeDomainData = (audioCtx, analyser, buffer, fftSize = 32768, rate, channels) => new Promise(resolve =>{\n  analyser.fftSize = fftSize;\n  audioCtx.decodeAudioData(\n    // todo: move to settings\n    withWaveHeader(buffer, channels, rate), (audioBuffer) => {\n      const source = audioCtx.createBufferSource();\n      source.buffer = audioBuffer;\n      source.connect(analyser);\n      const bufferLength = analyser.fftSize;\n      let dataArray = new Uint8Array(bufferLength);\n      analyser.getByteTimeDomainData(dataArray);\n      source.start();\n      resolve(dataArray);\n    })\n});\n\n\nconst drawWave = function(dataArray, canvasCtx, width, height, styles) {\n  canvasCtx.fillStyle = styles.fillStyle;\n  canvasCtx.fillRect(0, 0, width, height);\n  canvasCtx.lineWidth = styles.lineWidth;\n  canvasCtx.strokeStyle = styles.strokeStyle;\n  canvasCtx.beginPath();\n  const bufferLength = dataArray.length;\n\n  const sliceWidth = width * 1.0 / bufferLength;\n  let x = 0;\n\n  for(let i = 0; i < bufferLength; i++) {\n    const v = dataArray[i] / 128.0; // byte / 2 || 255 / 2\n    const y = v * height / 2;\n\n    if(i === 0) {\n      canvasCtx.moveTo(x, y);\n    } else {\n      canvasCtx.lineTo(x, y);\n    }\n    x += sliceWidth;\n  }\n\n  canvasCtx.lineTo(width, height / 2);\n  canvasCtx.stroke();\n};\n\n\nexport { getByteTimeDomainData, drawWave };\n","import * as R from 'ramda';\nimport { inject, observer } from \"mobx-react\";\nimport {renderNothing, compose, lifecycle, withProps, branch, mapProps} from 'recompose';\nimport { SinewaveComponent } from './Component';\nimport { drawWave, getByteTimeDomainData } from \"./utils\";\n\nexport const Sinewave = observer(compose(\n  inject('store'),\n  branch(({ navigatorMicStream }) => R.isNil(navigatorMicStream), renderNothing),\n  withProps(({ fillStyle, store: { spectrumInfo, config }}) => ({\n    styles: {\n      fillStyle: fillStyle, // background\n      strokeStyle: 'rgb(0, 0, 0)', // line color\n      lineWidth: 1,\n    },\n    fftSize: 32768,\n    rate: config.mic.rate,\n    channels: config.mic.channels,\n    sinewaveScale: config.sinewaveScale,\n  })),\n  lifecycle({\n    async componentDidMount() {\n      const { navigatorMicStream, fftSize, rate, channels, sinewaveScale } = this.props;\n      const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n      const analyser = audioCtx.createAnalyser();\n\n      const canvas = document.querySelector('.sinewave');\n      const { width, height  } = canvas;\n      const canvasCtx = canvas.getContext(\"2d\");\n      canvasCtx.clearRect(0, 0, canvas.width, canvas.height);\n      navigatorMicStream.on('data', async buffer => {\n        const wave = await getByteTimeDomainData(audioCtx, analyser, buffer, fftSize, rate, channels, sinewaveScale);\n        drawWave(wave, canvasCtx, width, height, this.props.styles);\n      })\n    },\n  }),\n  mapProps(R.applySpec({\n    sineWaveHeight: R.path(['store', 'windowInfo', 'sineWaveHeight']),\n    sineWaveWidth: R.path(['store', 'windowInfo', 'sineWaveWidth']),\n    wavesCount: R.path(['wavesCount']),\n  })),\n)(SinewaveComponent));\n\n","import * as R from 'ramda';\nimport React from 'react';\nimport { number } from 'prop-types';\n\nconst SinewaveComponent = ({ sineWaveHeight, sineWaveWidth }) => (\n  <div className=\"d-flex flex-row\">\n    <canvas className=\"sinewave\" width={sineWaveWidth} height={sineWaveHeight}></canvas>\n  </div>\n);\n\nSinewaveComponent.propTypes = {\n  sineWaveHeight: number,\n  sineWaveWidth: number,\n};\n\nexport { SinewaveComponent };\n","import { withWaveHeader } from \"../SinewaveStream/wave-heared\";\n\nconst getByteFrequencyData = (audioCtx, analyser, buffer, fftSize = 2048, rate, channels) => new Promise(resolve =>{\n  analyser.fftSize = fftSize;\n  audioCtx.decodeAudioData(\n    withWaveHeader(buffer, channels, rate), (audioBuffer) => {\n      const source = audioCtx.createBufferSource();\n      source.buffer = audioBuffer;\n      source.connect(analyser);\n      const bufferLength = analyser.fftSize;\n      let dataArray = new Uint8Array(bufferLength);\n      analyser.getByteFrequencyData(dataArray);\n      source.start();\n      resolve(dataArray);\n    })\n});\n\nconst drawLines = (spectrumInfo, minRateDif, canvasCtx, width, height, styles) => {\n  canvasCtx.beginPath();\n  const moveTo = height - spectrumInfo.meanOfBreath;\n  const withRating = moveTo - (moveTo * ( minRateDif / 100));\n\n  const moveToLive = height - spectrumInfo.mean;\n  const withRatingLive = moveToLive - (moveToLive * ( minRateDif / 100));\n\n  canvasCtx.moveTo(0 , withRating);\n  canvasCtx.lineTo(width, withRating);\n  canvasCtx.strokeStyle = styles.meanLine.strokeStyle;\n  canvasCtx.lineWidth = styles.meanLine.lineWidth;\n  canvasCtx.stroke();\n\n  canvasCtx.moveTo(0, withRatingLive);\n  canvasCtx.lineTo(width, withRatingLive);\n  canvasCtx.strokeStyle = styles.liveLine.strokeStyle;\n  canvasCtx.lineWidth = styles.liveLine.lineWidth;\n  canvasCtx.stroke();\n};\n\nconst drawBar = function(dataArray, spectrumInfo, minRateDif, canvasCtx, width, height, styles) {\n  canvasCtx.fillRect(0, 0, width, height);\n  canvasCtx.beginPath();\n  const bufferLength = dataArray.length;\n  const barWidth = (width / bufferLength) * 2.5;\n  let barHeight;\n  let x = 0;\n\n  for(let i = 0; i < bufferLength; i++) {\n    barHeight = dataArray[i];\n\n    canvasCtx.fillStyle = styles.strokeStyle;\n    canvasCtx.fillRect(x, height - barHeight / 2, barWidth, barHeight / 2);\n\n    x += barWidth + 1;\n  }\n  if (spectrumInfo.meanOfBreath) {\n    drawLines(spectrumInfo, minRateDif, canvasCtx, width, height, styles)\n  }\n\n  canvasCtx.fillStyle = styles.fillStyle;\n};\n\nexport { drawBar, getByteFrequencyData, drawLines };\n","import * as R from \"ramda\";\nimport { branch, compose, lifecycle, renderNothing, withProps, mapProps } from 'recompose';\nimport { FrequencyBarsComponent } from './Component';\nimport { drawBar, getByteFrequencyData, drawMeanLine } from \"./utils\";\nimport { inject, observer } from 'mobx-react';\n\nexport const FrequencyBars = compose(\n  observer,\n  inject('store'),\n  branch(({ navigatorMicStream }) => R.isNil(navigatorMicStream), renderNothing),\n  withProps(({ store: { spectrumInfo, config }}) => ({\n    styles: {\n      fillStyle: 'white',\n      strokeStyle: 'rgb(0, 0, 0)', // line color\n      lineWidth: 1,\n      meanLine: {\n        strokeStyle: '#ff0000', // line color\n        lineWidth: 1,\n      },\n      liveLine: {\n        strokeStyle: '#28a745', // line color\n        lineWidth: 1,\n      }\n    },\n    fftSize: 256,\n    rate: config.mic.rate,\n    channels: config.mic.channels,\n    minRateDif: config.minRateDif,\n  })),\n  lifecycle({\n    componentDidMount() {\n      const { navigatorMicStream, fftSize, channels, rate, store, minRateDif } = this.props;\n      const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n      const analyser = audioCtx.createAnalyser();\n\n      const canvas = document.querySelector('.frequency-bars');\n      const { width, height  } = canvas;\n      const canvasCtx = canvas.getContext(\"2d\");\n      canvasCtx.clearRect(0, 0, canvas.width, canvas.height);\n\n      navigatorMicStream.on('data', async buffer => {\n        const data = await getByteFrequencyData(audioCtx, analyser, buffer, fftSize, rate, channels);\n        drawBar(data, store.spectrumInfo, minRateDif, canvasCtx, width, height, this.props.styles);\n        store.spectrumInfo.setMean(data);\n      });\n      navigatorMicStream.on('error', alert);\n    },\n  }),\n  mapProps(R.applySpec({\n    frequencyHeight: R.path(['store', 'windowInfo', 'frequencyHeight']),\n    frequencyWidth: R.path(['store', 'windowInfo', 'frequencyWidth']),\n  }))\n)(FrequencyBarsComponent);\n","import React from 'react';\nimport { number } from 'prop-types';\n\nconst FrequencyBarsComponent = ({  frequencyHeight, frequencyWidth }) => (\n  <canvas className=\"frequency-bars\" width={frequencyWidth} height={frequencyHeight}></canvas>\n);\n\nFrequencyBarsComponent.propTypes = {\n  frequencyWidth: number,\n  frequencyHeight: number\n};\n\nexport { FrequencyBarsComponent };\n","import * as R from 'ramda';\nimport { compose, mapProps } from 'recompose';\nimport { observer, inject } from 'mobx-react';\nimport { InfoBarComponent } from './Component';\n\nconst InfoBarContainer = compose(\n  inject('store'),\n  mapProps(R.applySpec({\n    spectrumInfo: R.path(['store','spectrumInfo']),\n    config: R.path(['store','config']),\n    })),\n)(observer(InfoBarComponent));\n\nexport const InfoBar = inject('store')(InfoBarContainer);\n","import React from 'react';\n// import { string, func } from 'prop-types';\n\n// use it on dev\nconst ConfigBar = ({ config }) => (\n  <div className=\"d-flex flex-column justify-content-between\">\n    <p>Config:  </p>\n    <p>Url: {config.url} </p>\n    <p>Mic Rate: {config.mic.rate} </p>\n    <p>Mic Channels: {config.mic.channels} </p>\n    <p>Mic Name: {config.mic.device} </p>\n    <p>Time To Listen: {config.timeToListen} </p>\n    <p>Min RateDif: {config.minRateDif} </p>\n    <p>Sinewave Scale: {config.sinewaveScale} </p>\n  </div>\n);\n\nconst InfoBarComponent = ({ spectrumInfo, config }) =>\n  spectrumInfo.timeLeft <= 0 ? (\n    <div >\n      <div className=\"d-flex flex-column justify-content-center\" >\n        <h1 className=\"text-center\">\n           {spectrumInfo.meanOfBreathR} %\n        </h1>\n        <h1 className=\"text-center\">\n          {spectrumInfo.mean} / {spectrumInfo.meanOfBreath}\n        </h1>\n      </div>\n      {/*{<ConfigBar config={config}>}*/}\n    </div>\n    ) : (<h1 className=\"text-center\">{spectrumInfo.timeLeft }</h1>);\n\nInfoBarComponent.propTypes = {\n\n};\n\nexport { InfoBarComponent };\n","import * as R from 'ramda';\nimport { compose, mapProps, withHandlers } from 'recompose';\nimport { observer, inject } from 'mobx-react';\nimport { InteractWindowComponent } from './Component';\n\nconst InteractWindow = compose(\n  inject('store'),\n  mapProps(R.applySpec({\n    windowInfo: R.path(['store','windowInfo']),\n  })),\n  withHandlers({\n    onInteractWithWindowClick: ({ windowInfo }) => () => windowInfo.interactWithWindow(),\n  })\n)(InteractWindowComponent);\n\nexport { InteractWindow }\n","import React from 'react';\nimport { func } from 'prop-types';\nimport './style.css'\n\nconst InteractWindowComponent = ({ onInteractWithWindowClick }) =>\n  <div onClick={onInteractWithWindowClick} className=\"interact-window\">\n    <p onClick={onInteractWithWindowClick}>Tab to Start</p>\n  </div>;\n\nInteractWindowComponent.propTypes = {\n  onInteractWithWindowClick: func\n};\n\nexport { InteractWindowComponent };\n","import * as R from \"ramda\";\nimport React from 'react';\nimport { compose, lifecycle, mapProps, withState, branch, renderComponent } from \"recompose\";\nimport { inject, observer } from \"mobx-react\";\nimport ss from 'socket.io-stream';\nimport socketClient from 'socket.io-client';\n\nimport { Sinewave } from './components/SinewaveStream';\nimport { FrequencyBars } from './components/FrequencyBarsStream';\nimport { InfoBar } from './components/InfoBar';\nimport { InteractWindow } from './components/InteractWindow';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { getBackgroundColor } from '../src/utils/getBackgroundColor';\n\nconst url = process.env.NODE_ENV === 'production' ?\n  `${window.location.hostname}:${window.location.port}` : `${window.location.hostname}:3001`;\nconst socket = socketClient(url);\n\nconst AppComponent = ({ navigatorMicStream, spectrumInfo, config }) => {\n const fillStyle = getBackgroundColor(spectrumInfo.meanOfBreathR, spectrumInfo.timeLeft, config);\n return  <div className=\"container-fluid\" style={{padding: 0}}>\n    {config.mic.rate &&\n      <Sinewave navigatorMicStream={navigatorMicStream} fillStyle={fillStyle} />}\n    {config.mic.rate &&\n      <FrequencyBars navigatorMicStream={navigatorMicStream} />}\n    <InfoBar />\n  </div>;\n};\n\nconst AppBranch =  compose(\n  branch(({ windowInfo }) => !windowInfo.isInteracted, renderComponent(InteractWindow)),\n)(observer(AppComponent));\n\nexport const App = compose(\n  observer,\n  inject('store'),\n  mapProps(R.applySpec({\n    spectrumInfo: R.path(['store','spectrumInfo']),\n    windowInfo: R.path(['store','windowInfo']),\n    config: R.path(['store','config']),\n  })),\n  withState('navigatorMicStream', 'setStream', null),\n  lifecycle({\n    componentDidMount() {\n      this.props.windowInfo.init();\n      this.props.config.setUrl(url);\n      ss(socket).on('mic-stream', (stream, { mic }) => {\n        this.props.setStream(stream);\n        this.props.config.setMic(mic.rate, mic.channels, mic.device);\n      });\n    }\n  }),\n)(observer(AppBranch));\n\nexport default App;\n","const getBackgroundColor = (ratting, timeLeft, config) => {\n  if(timeLeft !== 0) {\n    return 'white';\n  }\n  if(ratting > config.minRateDif) {\n    console.log(100 - ratting || 0)\n    return `rgb(255, ${155 - (ratting + 15) || 0},  ${155 - (ratting + 15) || 0})`; // red\n  } else {\n    return `rgb(${155 + ratting}, 255, ${155 + ratting})`; // green\n  }\n};\n\nexport { getBackgroundColor };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as R from \"ramda\";\n\nclass MeanSpectrumOfBreath {\n  constructor(config) {\n    this._statOfListen = null;\n    this._isListening = true;\n    this._time = config.timeToListen; // s\n\n    this._means = [];\n    this._mean = 0;\n    this._maxes = [];\n    this._max = 0;\n    this.listen = this.listen.bind(this);\n  }\n\n  listen(meanSpectrum, maxSpectrum) {\n    if(!this._isListening) return;\n\n    this._statOfListen = this._statOfListen || new Date().getTime();\n    const diffInSec = (new Date().getTime() - this._statOfListen ) / 1000;\n    const index = parseInt(diffInSec, 10) - 1;\n\n    if(index < 0) return;\n    this._means[index] = this._means[index] || [];\n    this._maxes[index] = this._maxes[index] || [];\n    this._means[index].push(meanSpectrum);\n    this._maxes[index].push(maxSpectrum);\n\n    if(diffInSec > this._time) {\n      this._isListening = false;\n      this._mean = R.mean(this._means.map(R.reduce(R.max, 0)));\n      this._max = R.mean(this._maxes.map(R.reduce(R.max, 0)));\n    }\n  }\n  getMean() {\n    return this._mean;\n  }\n  getMax() {\n    return this._max;\n  }\n  getTimeLeft() {\n    if(!this._isListening) return 0;\n    const diffInSec = (new Date().getTime() - this._statOfListen ) / 1000;\n    return this._time - parseInt(diffInSec, 10);\n  }\n}\n\nexport { MeanSpectrumOfBreath };\n","import { types } from \"mobx-state-tree\";\n\nconst staticConfig = {\n  timeToListen: 10, // seconds\n  minRateDif: 10, // %\n  sinewaveScale: 1.9\n};\n\nconst Config = types\n  .model(\"SpectrumInfo\", {\n    mic:  types.frozen({\n      rate: types.number,\n      channels: types.number,\n      device: types.string,\n    }),\n    url: types.string,\n    timeToListen: types.number,\n    minRateDif: types.number,\n    sinewaveScale: types.number,\n  })\n  .actions(self => ({\n    setMic(rate, channels, device) {\n      self.mic = { rate, channels, device };\n    },\n    setUrl(url) {\n      self.url = url;\n    },\n   }));\n\nconst config = Config.create({\n  mic: {\n    rate: 0,\n    channels: 0,\n    device: 1,\n  },\n  url:'',\n  ...staticConfig,\n});\n\nexport { config, staticConfig };\n","import * as R from \"ramda\";\nimport { types } from \"mobx-state-tree\";\nimport { notify } from \"../utils/notify\";\nimport { MeanSpectrumOfBreath } from \"../utils/MeanSpectrumOfBreath\";\nimport { staticConfig } from './config'\nconst meanSpectrumOfBreath = new MeanSpectrumOfBreath(staticConfig);\n\nconst SpectrumInfo = types\n  .model(\"SpectrumInfo\", {\n    mean: types.number,\n    max: types.number,\n    meanOfBreath: types.number,\n    meanOfBreathR: types.number,\n    timeLeft: types.number,\n  })\n  .actions(self => ({\n    setMean(spectrum) {\n      self.mean = parseInt(R.mean(spectrum), 10);\n      self.max = R.reduce(R.max, 0, spectrum)\n      meanSpectrumOfBreath.listen(self.mean, self.max);\n      self.meanOfBreath = meanSpectrumOfBreath.getMean();\n      self.timeLeft = meanSpectrumOfBreath.getTimeLeft();\n\n      if(self.meanOfBreath) {\n        self.meanOfBreathR = parseInt(100 - (self.meanOfBreath * 100) / self.mean, 10) || 0;\n        self.meanOfBreathR = self.meanOfBreathR > 0 ? self.meanOfBreathR : 0;\n      }\n      self.meanOfBreathR && notify(self.meanOfBreathR, staticConfig);\n    },\n  }));\n\nconst spectrumInfo = SpectrumInfo.create({\n  mean: 0,\n  max: 0,\n  meanOfBreath: 0,\n  meanOfBreathR: 0,\n  timeLeft: -1,\n});\n\nexport { spectrumInfo };\n","import { spectrumInfo } from \"./spectrum-info\";\nimport { windowInfo } from \"./window-info\";\nimport { config } from \"./config\";\n\nconst store = {\n  spectrumInfo,\n  windowInfo,\n  config,\n};\n\nexport { store };\n","import { types } from \"mobx-state-tree\";\n\nconst WindowInfo = types\n  .model(\"WindowInfo\", {\n    sineWaveHeight: types.number,\n    frequencyHeight: types.number,\n    sineWaveWidth: types.number,\n    frequencyWidth: types.number,\n    isInteracted: types.boolean,\n  })\n  .actions(self => ({\n    init() {\n      const windowHeight = window.innerHeight;\n      self.sineWaveHeight = (windowHeight * 0.35);\n      self.frequencyHeight = (windowHeight * 0.35);\n      self.sineWaveWidth = window.innerWidth;\n      self.frequencyWidth = window.innerWidth;\n    },\n    interactWithWindow () {\n      self.isInteracted = true;\n    }\n  }));\n\nconst windowInfo = WindowInfo.create({\n  sineWaveHeight: 0,\n  frequencyHeight: 0,\n  sineWaveWidth: 0,\n  frequencyWidth: 0,\n  isInteracted: false,\n});\n\nexport { windowInfo };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'mobx-react';\nimport { store } from './mobix/store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}