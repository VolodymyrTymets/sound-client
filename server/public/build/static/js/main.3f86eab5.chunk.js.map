{"version":3,"sources":["components/SinewaveStream/wave-heared.js","components/SinewaveStream/utils.js","components/SinewaveStream/Container.js","components/SinewaveStream/Component.js","components/FrequencyBarsStream/utils.js","components/FrequencyBarsStream/Container.js","components/FrequencyBarsStream/Component.js","components/InfoBar/Container.js","utils/distance-getter/get-distance.js","components/InfoBar/Component.js","components/InteractWindow/Container.js","components/InteractWindow/Component.js","App.js","serviceWorker.js","utils/soud-notify.js","utils/MeanSpectrumOfBreath.js","mobix/config.js","mobix/spectrum-info.js","mobix/store.js","mobix/window-info.js","index.js"],"names":["withWaveHeader","data","numberOfChannels","sampleRate","header","ArrayBuffer","d","DataView","setUint8","charCodeAt","setUint32","byteLength","setUint16","buffer1","buffer2","tmp","Uint8Array","set","buffer","concat","getByteTimeDomainData","audioCtx","analyser","fftSize","arguments","length","undefined","rate","channels","Promise","resolve","decodeAudioData","audioBuffer","source","createBufferSource","connect","bufferLength","dataArray","start","drawWave","canvasCtx","width","height","styles","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","sliceWidth","x","i","y","moveTo","lineTo","stroke","Sinewave","observer","compose","inject","branch","_ref","navigatorMicStream","R","renderNothing","withProps","_ref2","color","_ref2$store","store","config","spectrumInfo","mic","sinewaveScale","chunkCount","withState","withHandlers","changeUrls","_ref3","setImgUrls","imgUrls","url","pop","urls","Object","toConsumableArray","lifecycle","componentDidMount","_componentDidMount","asyncToGenerator","regenerator_default","a","mark","_callee2","_this$props","canvas","_this","this","wrap","_context2","prev","next","props","setImgUrl","window","AudioContext","webkitAudioContext","createAnalyser","document","querySelector","getContext","clearRect","setInterval","toDataURL","on","_ref4","_callee","wave","_context","sent","stop","_x","apply","mapProps","sineWaveHeight","sineWaveWidth","wavesCount","imgUrl","react_default","createElement","className","map","index","src","key","getByteFrequencyData","drawBar","minRateDif","barHeight","barWidth","FrequencyBars","setMean","alert","frequencyHeight","frequencyWidth","InfoBarContainer","distance","min","max","ratting","rating","range","Math","round","getDistance","timeLeft","style","meanOfBreath","mean","meanOfBreathR","maxRateDif","InfoBar","InteractWindow","windowInfo","onInteractWithWindowClick","interactWithWindow","onClick","location","hostname","port","socket","socketClient","AppBranch","isInteracted","renderComponent","padding","App","init","setUrl","ss","stream","minBreathTime","setStream","setRate","setMinBreathTime","setMic","device","changeConfig","Boolean","match","oscillator","soundStart","createOscillator","type","frequency","setValueAtTime","currentTime","destination","getOscillator","MeanSpectrumOfBreath","classCallCheck","_statOfListen","_isListening","_time","timeToListen","_minBreathTime","_minRateDif","_lastColorNotificationDate","_lastSoundNotificationDate","_means","_mean","_maxes","_max","listen","bind","meanSpectrum","maxSpectrum","Date","getTime","diffInSec","parseInt","push","meanRating","diff","console","log","staticConfig","types","model","frozen","number","string","actions","self","setMaxRateDif","create","objectSpread","meanSpectrumOfBreath","spectrum","getMean","getTimeLeft","getColor","soundNotify","boolean","windowHeight","innerHeight","innerWidth","ReactDOM","render","index_module","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f86eab5.chunk.js","sourcesContent":["const concat = (buffer1, buffer2) => {\n  const tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n\n  tmp.set(new Uint8Array(buffer1), 0);\n  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n\n  return tmp.buffer;\n};\n\n\nconst withWaveHeader = (data, numberOfChannels, sampleRate) => {\n  const header = new ArrayBuffer(44);\n\n  var d = new DataView(header);\n\n  d.setUint8(0, \"R\".charCodeAt(0));\n  d.setUint8(1, \"I\".charCodeAt(0));\n  d.setUint8(2, \"F\".charCodeAt(0));\n  d.setUint8(3, \"F\".charCodeAt(0));\n\n  d.setUint32(4, data.byteLength / 2 + 44, true);\n\n  d.setUint8(8, \"W\".charCodeAt(0));\n  d.setUint8(9, \"A\".charCodeAt(0));\n  d.setUint8(10, \"V\".charCodeAt(0));\n  d.setUint8(11, \"E\".charCodeAt(0));\n  d.setUint8(12, \"f\".charCodeAt(0));\n  d.setUint8(13, \"m\".charCodeAt(0));\n  d.setUint8(14, \"t\".charCodeAt(0));\n  d.setUint8(15, \" \".charCodeAt(0));\n\n  d.setUint32(16, 16, true);\n  d.setUint16(20, 1, true);\n  d.setUint16(22, numberOfChannels, true);\n  d.setUint32(24, sampleRate, true);\n  d.setUint32(28, sampleRate * 1 * 2);\n  d.setUint16(32, numberOfChannels * 2);\n  d.setUint16(34, 16, true);\n\n  d.setUint8(36, \"d\".charCodeAt(0));\n  d.setUint8(37, \"a\".charCodeAt(0));\n  d.setUint8(38, \"t\".charCodeAt(0));\n  d.setUint8(39, \"a\".charCodeAt(0));\n  d.setUint32(40, data.byteLength, true);\n\n  return concat(header, data);\n};\n\nexport { withWaveHeader };\n","import { withWaveHeader } from './wave-heared'\n\nconst getByteTimeDomainData = (audioCtx, analyser, buffer, fftSize = 32768, rate, channels) => new Promise(resolve =>{\n  analyser.fftSize = fftSize;\n  audioCtx.decodeAudioData(\n    // todo: move to settings\n    withWaveHeader(buffer, channels, rate), (audioBuffer) => {\n      const source = audioCtx.createBufferSource();\n      source.buffer = audioBuffer;\n      source.connect(analyser);\n      const bufferLength = analyser.fftSize;\n      let dataArray = new Uint8Array(bufferLength);\n      analyser.getByteTimeDomainData(dataArray);\n      source.start();\n      resolve(dataArray);\n    })\n});\n\n\nconst drawWave = function(dataArray, canvasCtx, width, height, styles) {\n  canvasCtx.fillStyle = styles.fillStyle;\n  canvasCtx.fillRect(0, 0, width, height);\n  canvasCtx.lineWidth = styles.lineWidth;\n  canvasCtx.strokeStyle = styles.strokeStyle;\n  canvasCtx.beginPath();\n  const bufferLength = dataArray.length;\n\n  const sliceWidth = width * 1.0 / bufferLength;\n  let x = 0;\n\n  for(let i = 0; i < bufferLength; i++) {\n    const v = dataArray[i] / 128.0; // byte / 2 || 255 / 2\n    const y = v * height / 2;\n\n    if(i === 0) {\n      canvasCtx.moveTo(x, y);\n    } else {\n      canvasCtx.lineTo(x, y);\n    }\n    x += sliceWidth;\n  }\n\n  canvasCtx.lineTo(width, height / 2);\n  canvasCtx.stroke();\n};\n\n\nexport { getByteTimeDomainData, drawWave };\n","import * as R from 'ramda';\nimport { inject, observer } from \"mobx-react\";\nimport {renderNothing, compose, lifecycle, withProps, branch, mapProps, withState, withHandlers } from 'recompose';\nimport { SinewaveComponent } from './Component';\nimport { drawWave, getByteTimeDomainData } from \"./utils\";\n\nexport const Sinewave = observer(compose(\n  inject('store'),\n  branch(({ navigatorMicStream }) => R.isNil(navigatorMicStream), renderNothing),\n  withProps(({ color, store: { spectrumInfo, config }}) => ({\n    styles: {\n      fillStyle: 'white', //fillStyle, // background\n      strokeStyle: color, //'rgb(0, 0, 0)', // line color\n      lineWidth: 1,\n    },\n    fftSize: 32768 / 8,\n    rate: config.mic.rate,\n    channels: config.mic.channels,\n    sinewaveScale: config.sinewaveScale,\n    chunkCount: 80,\n  })),\n  withState('imgUrl', 'setImgUrl'),\n  withState('imgUrls', 'setImgUrls', []),\n  withHandlers({\n    changeUrls: ({ setImgUrls, imgUrls, chunkCount}) => (url) => {\n      if(chunkCount === imgUrls.length) {\n        imgUrls.pop();\n      }\n      const urls = [url, ...imgUrls];\n      setImgUrls(urls)\n    }\n  }),\n  lifecycle({\n    async componentDidMount() {\n      const { navigatorMicStream, fftSize, rate, channels, sinewaveScale, setImgUrl, changeUrls } = this.props;\n      const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n      const analyser = audioCtx.createAnalyser();\n\n      const canvas = document.querySelector('.sinewave');\n      const { width, height  } = canvas;\n      const canvasCtx = canvas.getContext(\"2d\");\n      canvasCtx.clearRect(0, 0, canvas.width, canvas.height);\n\n      setInterval(() => {\n        const url = canvas.toDataURL();\n        changeUrls(url);\n      },\n        (fftSize / rate)  * 1000)\n      navigatorMicStream.on('data', async buffer => {\n        const wave = await getByteTimeDomainData(audioCtx, analyser, buffer, fftSize, rate, channels, sinewaveScale);\n        drawWave(wave, canvasCtx, width, height, this.props.styles);\n      })\n    },\n  }),\n  mapProps(R.applySpec({\n    sineWaveHeight: R.path(['store', 'windowInfo', 'sineWaveHeight']),\n    sineWaveWidth: R.path(['store', 'windowInfo', 'sineWaveWidth']),\n    wavesCount: R.path(['wavesCount']),\n    imgUrl: R.path(['imgUrl']),\n    imgUrls: R.path(['imgUrls']),\n    chunkCount: R.path(['chunkCount']),\n  })),\n)(SinewaveComponent));\n\n","import * as R from 'ramda';\nimport React from 'react';\nimport { number } from 'prop-types';\n\nconst SinewaveComponent = ({ sineWaveHeight, sineWaveWidth, chunkCount, imgUrls }) => (\n  <div className=\"d-flex flex-row\">\n    {R.range(1, chunkCount + 1).map((index) =>\n      imgUrls[chunkCount - index] && <img\n        src={imgUrls[chunkCount - index]}\n        key={`image-${index}`}\n        width={sineWaveWidth / chunkCount}\n        height={sineWaveHeight}\n      />)\n    }\n    <canvas\n      className=\"sinewave\"\n      width={sineWaveWidth / chunkCount}\n      height={sineWaveHeight}\n    />\n  </div>\n);\n\nSinewaveComponent.propTypes = {\n  sineWaveHeight: number,\n  sineWaveWidth: number,\n};\n\nexport { SinewaveComponent };\n","import { withWaveHeader } from \"../SinewaveStream/wave-heared\";\n\nconst getByteFrequencyData = (audioCtx, analyser, buffer, fftSize = 2048, rate, channels) => new Promise(resolve =>{\n  analyser.fftSize = fftSize;\n  audioCtx.decodeAudioData(\n    withWaveHeader(buffer, channels, rate), (audioBuffer) => {\n      const source = audioCtx.createBufferSource();\n      source.buffer = audioBuffer;\n      source.connect(analyser);\n      const bufferLength = analyser.fftSize;\n      let dataArray = new Uint8Array(bufferLength);\n      analyser.getByteFrequencyData(dataArray);\n      source.start();\n      resolve(dataArray);\n    })\n});\n// todo: do not needed anymore\n// const drawLines = (spectrumInfo, minRateDif, canvasCtx, width, height, styles) => {\n//   canvasCtx.beginPath();\n//   const moveTo = height - spectrumInfo.meanOfBreath;\n//   const withRating = moveTo - (moveTo * ( minRateDif / 100));\n//\n//   const moveToLive = height - spectrumInfo.mean;\n//   const withRatingLive = moveToLive - (moveToLive * ( minRateDif / 100));\n//\n//   canvasCtx.moveTo(0 , withRating);\n//   canvasCtx.lineTo(width, withRating);\n//   canvasCtx.strokeStyle = styles.meanLine.strokeStyle;\n//   canvasCtx.lineWidth = styles.meanLine.lineWidth;\n//   canvasCtx.stroke();\n//\n//   canvasCtx.moveTo(0, withRatingLive);\n//   canvasCtx.lineTo(width, withRatingLive);\n//   canvasCtx.strokeStyle = styles.liveLine.strokeStyle;\n//   canvasCtx.lineWidth = styles.liveLine.lineWidth;\n//   canvasCtx.stroke();\n// };\n\nconst drawBar = function(dataArray, spectrumInfo, minRateDif, canvasCtx, width, height, styles) {\n  canvasCtx.fillRect(0, 0, width, height);\n  canvasCtx.beginPath();\n  const bufferLength = dataArray.length;\n  const barWidth = (width / bufferLength) * 2.5;\n  let barHeight;\n  let x = 0;\n\n  for(let i = 0; i < bufferLength; i++) {\n    barHeight = dataArray[i];\n\n    canvasCtx.fillStyle = styles.strokeStyle;\n    canvasCtx.fillRect(x, height - barHeight, barWidth, barHeight);\n\n    x += barWidth + 1;\n  }\n  // if (spectrumInfo.meanOfBreath) {\n  //   drawLines(spectrumInfo, minRateDif, canvasCtx, width, height, styles)\n  // }\n\n  canvasCtx.fillStyle = styles.fillStyle;\n};\n\nexport { drawBar, getByteFrequencyData };\n","import * as R from \"ramda\";\nimport { branch, compose, lifecycle, renderNothing, withProps, mapProps } from 'recompose';\nimport { FrequencyBarsComponent } from './Component';\nimport { drawBar, getByteFrequencyData } from \"./utils\";\nimport { inject, observer } from 'mobx-react';\n\nexport const FrequencyBars = compose(\n  observer,\n  inject('store'),\n  branch(({ navigatorMicStream }) => R.isNil(navigatorMicStream), renderNothing),\n  withProps(({ color, store: { spectrumInfo, config }}) => ({\n    styles: {\n      fillStyle: 'white',\n      strokeStyle: color, // line color\n      lineWidth: 1,\n    },\n    fftSize: 256,\n    rate: config.mic.rate,\n    channels: config.mic.channels,\n    minRateDif: config.minRateDif,\n  })),\n  lifecycle({\n    componentDidMount() {\n      const { navigatorMicStream, fftSize, channels, rate, store, minRateDif } = this.props;\n      const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n      const analyser = audioCtx.createAnalyser();\n\n      const canvas = document.querySelector('.frequency-bars');\n      const { width, height  } = canvas;\n      const canvasCtx = canvas.getContext(\"2d\");\n      canvasCtx.clearRect(0, 0, canvas.width, canvas.height);\n\n      navigatorMicStream.on('data', async buffer => {\n        const data = await getByteFrequencyData(audioCtx, analyser, buffer, fftSize, rate, channels);\n        drawBar(data, store.spectrumInfo, minRateDif, canvasCtx, width, height, this.props.styles);\n        store.spectrumInfo.setMean(data);\n      });\n      navigatorMicStream.on('error', alert);\n    },\n  }),\n  mapProps(R.applySpec({\n    frequencyHeight: R.path(['store', 'windowInfo', 'frequencyHeight']),\n    frequencyWidth: R.path(['store', 'windowInfo', 'frequencyWidth']),\n  }))\n)(FrequencyBarsComponent);\n","import React from 'react';\nimport { number } from 'prop-types';\n\nconst FrequencyBarsComponent = ({  frequencyHeight, frequencyWidth }) => (\n  <canvas className=\"frequency-bars\" width={frequencyWidth} height={frequencyHeight}></canvas>\n);\n\nFrequencyBarsComponent.propTypes = {\n  frequencyWidth: number,\n  frequencyHeight: number\n};\n\nexport { FrequencyBarsComponent };\n","import * as R from 'ramda';\nimport { compose, mapProps } from 'recompose';\nimport { observer, inject } from 'mobx-react';\nimport { InfoBarComponent } from './Component';\nimport { getDistance } from '../../utils/distance-getter/get-distance';\n\nconst InfoBarContainer = compose(\n  inject('store'),\n  mapProps(R.applySpec({\n    spectrumInfo: R.path(['store','spectrumInfo']),\n    config: R.path(['store','config']),\n    distance: R.pipe(\n      R.applySpec({\n        min: R.path(['store','config', 'minRateDif']),\n        max: R.path(['store','config', 'maxRateDif']),\n        ratting: R.path(['store','spectrumInfo', 'meanOfBreathR']),\n      }),\n      ({ min, max, ratting }) => getDistance(min, max, ratting || 0),\n    )\n  })),\n)(observer(InfoBarComponent));\n\nexport const InfoBar = inject('store')(InfoBarContainer);\n","/**\n* This function return distance in millimeters\n* from RN to point of stimulation by sound spectrum value\n* @name  getDistance\n * @function\n * @param {Number} - min value of RLN reaction (furthest distance)\n * @param {Number} - min value of RLN reaction (closest distance)\n * @param {Number} - rating of breath in a pint of stimulation\n * @param {Number} - distance range from RLN where reaction are possible\n**/\nconst getDistance = (min, max, rating, range = 6) => {\n    if(rating < min ) return null;\n    if(rating > max ) return 0;\n    // step of value that is changing with distance\n    const step = (max - min) / range;\n    const distance = (max - rating) / step;\n    return Math.round(distance)\n};\n\nexport { getDistance };","import React from 'react';\n// import { string, func } from 'prop-types';\n\n// use it on dev\nconst ConfigBar = ({ config }) => (\n  <div className=\"d-flex flex-column justify-content-center align-items-center\">\n\n    <p>Config:  </p>\n    <p>Url: {config.url} </p>\n    <p>Mic Rate: {config.mic.rate} </p>\n    <p>Mic Channels: {config.mic.channels} </p>\n    <p>Mic Name: {config.mic.device} </p>\n    <p>Time To Listen: {config.timeToListen} </p>\n    <p>Min RateDif: {config.minRateDif} </p>\n    <p>Sinewave Scale: {config.sinewaveScale} </p>\n  </div>\n);\n\nconst InfoBarComponent = ({ spectrumInfo, config, distance }) =>\n  spectrumInfo.timeLeft <= 0 ? (\n    <div className=\"d-flex flex-column justify-content-center align-items-center flex-fill\">\n      <h1 className=\"text-center\" style={{color: spectrumInfo.color}}>\n        {distance !== null ? `${distance} mm`: '-'  }\n      </h1>\n      <div className=\"d-flex flex-column justify-content-center\" >\n        <h3 className=\"text-center\">\n          <small className=\"text-muted\">Spectrum: </small>\n          {spectrumInfo.meanOfBreath} / {spectrumInfo.mean} = {spectrumInfo.meanOfBreathR} %\n        </h3>\n        <h5 className=\"text-center\">\n          <small className=\"text-muted\">Range: </small>{config.minRateDif}  / {config.maxRateDif}\n        </h5>\n      </div>\n      {/*{<ConfigBar config={config}>}*/}\n    </div>\n    ) : (<div className=\"flex-fill d-flex flex-column justify-content-center \"><h1 className=\"text-center\">{spectrumInfo.timeLeft }</h1></div>);\n\nInfoBarComponent.propTypes = {\n\n};\n\nexport { InfoBarComponent };\n","import * as R from 'ramda';\nimport { compose, mapProps, withHandlers } from 'recompose';\nimport { observer, inject } from 'mobx-react';\nimport { InteractWindowComponent } from './Component';\n\nconst InteractWindow = compose(\n  inject('store'),\n  mapProps(R.applySpec({\n    windowInfo: R.path(['store','windowInfo']),\n  })),\n  withHandlers({\n    onInteractWithWindowClick: ({ windowInfo }) => () => windowInfo.interactWithWindow(),\n  })\n)(InteractWindowComponent);\n\nexport { InteractWindow }\n","import React from 'react';\nimport { func } from 'prop-types';\nimport './style.css'\n\nconst InteractWindowComponent = ({ onInteractWithWindowClick }) =>\n  <div onClick={onInteractWithWindowClick} className=\"interact-window\">\n    <p onClick={onInteractWithWindowClick}>Tab to Start</p>\n  </div>;\n\nInteractWindowComponent.propTypes = {\n  onInteractWithWindowClick: func\n};\n\nexport { InteractWindowComponent };\n","import * as R from \"ramda\";\nimport React from 'react';\nimport { compose, lifecycle, mapProps, withState, branch, renderComponent } from \"recompose\";\nimport { inject, observer } from \"mobx-react\";\nimport ss from 'socket.io-stream';\nimport socketClient from 'socket.io-client';\n\nimport { Sinewave } from './components/SinewaveStream';\nimport { FrequencyBars } from './components/FrequencyBarsStream';\nimport { InfoBar } from './components/InfoBar';\nimport { InteractWindow } from './components/InteractWindow';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { getBackgroundColor } from '../src/utils/getBackgroundColor';\n\nconst url = process.env.NODE_ENV === 'production' ?\n  `${window.location.hostname}:${window.location.port}` : `${window.location.hostname}:3001`;\nconst socket = socketClient(url);\n\nconst AppComponent = ({ navigatorMicStream, spectrumInfo, config }) =>\n  <div className=\"container-fluid\" style={{padding: 0}}>\n    {config.mic.rate &&\n      <Sinewave navigatorMicStream={navigatorMicStream} color={spectrumInfo.color} />}\n    <div className=\"d-flex flex-row\">\n      <InfoBar />\n      {config.mic.rate &&\n        <FrequencyBars navigatorMicStream={navigatorMicStream} color={spectrumInfo.color} />}\n    </div>\n  </div>;\n\n\nconst AppBranch =  compose(\n  branch(({ windowInfo }) => !windowInfo.isInteracted, renderComponent(InteractWindow)),\n)(observer(AppComponent));\n\nexport const App = compose(\n  observer,\n  inject('store'),\n  mapProps(R.applySpec({\n    spectrumInfo: R.path(['store','spectrumInfo']),\n    windowInfo: R.path(['store','windowInfo']),\n    config: R.path(['store','config']),\n  })),\n  withState('navigatorMicStream', 'setStream', null),\n  lifecycle({\n    componentDidMount() {\n      this.props.windowInfo.init();\n      this.props.config.setUrl(url);\n      ss(socket).on('mic-stream', (stream, {\n        mic,\n        minRateDif,\n        minBreathTime,\n        maxRateDif\n      }) => {\n        this.props.setStream(stream);\n\n        this.props.config.setRate(minRateDif, maxRateDif);\n          this.props.config.setMinBreathTime(minBreathTime);\n        this.props.config.setMic(mic.rate, mic.channels, mic.device);\n        this.props.spectrumInfo.changeConfig({ minRateDif, minBreathTime })\n      });\n    }\n  }),\n)(observer(AppBranch));\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","let oscillator = null;\nconst getOscillator = () => {\n  const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n  const oscillator = audioCtx.createOscillator();\n  oscillator.type = 'square';\n  oscillator.frequency.setValueAtTime(2000, audioCtx.currentTime); // value in hertz\n  oscillator.connect(audioCtx.destination);\n  return oscillator;\n};\n\nconst soundStart = () => {\n  if(!oscillator) {\n    oscillator = getOscillator();\n    oscillator.start();\n  }\n};\n\nconst soundStop = () => {\n  oscillator && oscillator.stop();\n  oscillator = null;\n};\n\nexport { soundStart, soundStop };\n","import * as R from \"ramda\";\nimport {  soundStart, soundStop } from './soud-notify';\n\nclass MeanSpectrumOfBreath {\n  constructor(config) {\n    this._statOfListen = null;\n    this._isListening = true;\n    this._time = config.timeToListen; // s\n    this._minBreathTime = config.minBreathTime;\n    this._minRateDif = config.minRateDif;\n    this._lastColorNotificationDate = null;\n    this._lastSoundNotificationDate = null;\n\n    this._means = [];\n    this._mean = 0;\n    this._maxes = [];\n    this._max = 0;\n    this.listen = this.listen.bind(this);\n  }\n  changeConfig(config) {\n    this._time = config.timeToListen || this._time; // s\n    this._minBreathTime = config.minBreathTime || this._minBreathTime;\n    this._minRateDif = config.minRateDif || this._minRateDif;\n  }\n  listen(meanSpectrum, maxSpectrum) {\n    if(!this._isListening) return;\n\n    this._statOfListen = this._statOfListen || new Date().getTime();\n    const diffInSec = (new Date().getTime() - this._statOfListen ) / 1000;\n    const index = parseInt(diffInSec, 10) - 1;\n\n    if(index < 0) return;\n    this._means[index] = this._means[index] || [];\n    this._maxes[index] = this._maxes[index] || [];\n    this._means[index].push(meanSpectrum);\n    this._maxes[index].push(maxSpectrum);\n\n    if(diffInSec > this._time) {\n      this._isListening = false;\n      this._mean = R.mean(this._means.map(R.reduce(R.max, 0)));\n      this._max = R.mean(this._maxes.map(R.reduce(R.max, 0)));\n    }\n  }\n  getMean() {\n    return this._mean;\n  }\n  getMax() {\n    return this._max;\n  }\n  getTimeLeft() {\n    if(!this._isListening) return 0;\n    const diffInSec = (new Date().getTime() - this._statOfListen ) / 1000;\n    return this._time - parseInt(diffInSec, 10);\n  }\n  /** Change color only after little latency breath of people**/\n  getColor(meanRating) {\n    if(this._isListening) return '#c6c8ca'; //grey\n    this._lastColorNotificationDate = this._lastColorNotificationDate || new Date().getTime();\n    const diff = (new Date().getTime() - this._lastColorNotificationDate);\n    if(meanRating > this._minRateDif) {\n      if(diff >= this._minBreathTime) {\n        return `rgb(255, ${155 - (meanRating + 15) || 0},  ${155 - (meanRating + 15) || 0})`; // red\n      }\n    }\n    return 'black'; //`rgb(${155}, 255, ${155})`; // green\n  }\n  soundNotify(meanRating) {\n    this._lastSoundNotificationDate = this._lastSoundNotificationDate || new Date().getTime();\n    const diff = (new Date().getTime() - this._lastSoundNotificationDate);\n    if(meanRating > this._minRateDif) {\n      if(diff >= this._minBreathTime) {\n        console.log('----> soundStart ', )\n        return soundStart();\n      }\n    }\n    console.log('----> soundStop')\n    return soundStop();\n  }\n}\n\nexport { MeanSpectrumOfBreath };\n","import { types } from \"mobx-state-tree\";\n\nconst staticConfig = {\n  timeToListen: 10, // seconds\n  minRateDif: 50, // %\n  maxRateDif: 90, // %\n  sinewaveScale: 1.9,\n  minBreathTime: 100 // miliseconds\n};\n\nconst Config = types\n  .model(\"SpectrumInfo\", {\n    mic:  types.frozen({\n      rate: types.number,\n      channels: types.number,\n      device: types.string,\n    }),\n    url: types.string,\n    timeToListen: types.number,\n    minRateDif: types.number,\n    maxRateDif: types.number,\n    sinewaveScale: types.number,\n    minBreathTime: types.number,\n  })\n  .actions(self => ({\n    setMic(rate, channels, device) {\n      self.mic = { rate, channels, device };\n    },\n    setUrl(url) {\n      self.url = url;\n    },\n    setRate(min = staticConfig.minRateDif, max = staticConfig.maxRateDif) {\n      self.minRateDif = min;\n      self.maxRateDif = max;\n    },\n    setMaxRateDif(maxRateDif = staticConfig.maxRateDif) {\n      self.maxRateDif = maxRateDif;\n    },\n    setMinBreathTime(minBreathTime = staticConfig.minBreathTime) {\n      self.minBreathTime = minBreathTime;\n    },\n   }));\n\nconst config = Config.create({\n  mic: {\n    rate: 0,\n    channels: 0,\n    device: 1,\n  },\n  url:'',\n  ...staticConfig,\n});\n\nexport { config, staticConfig };\n","import * as R from \"ramda\";\nimport { types } from \"mobx-state-tree\";\nimport { MeanSpectrumOfBreath } from \"../utils/MeanSpectrumOfBreath\";\nimport { staticConfig } from './config'\nconst meanSpectrumOfBreath = new MeanSpectrumOfBreath(staticConfig);\n\nconst SpectrumInfo = types\n  .model(\"SpectrumInfo\", {\n    mean: types.number,\n    max: types.number,\n    meanOfBreath: types.number,\n    meanOfBreathR: types.number,\n    timeLeft: types.number,\n    color: types.string,\n  })\n  .actions(self => ({\n    setMean(spectrum) {\n      self.mean = parseInt(R.mean(spectrum), 10);\n      self.max = R.reduce(R.max, 0, spectrum);\n      meanSpectrumOfBreath.listen(self.mean, self.max);\n      self.meanOfBreath = meanSpectrumOfBreath.getMean();\n      self.timeLeft = meanSpectrumOfBreath.getTimeLeft();\n\n      if(self.meanOfBreath) {\n        self.meanOfBreathR = parseInt(100 - (self.meanOfBreath * 100) / self.mean, 10) || 0;\n        self.meanOfBreathR = self.meanOfBreathR > 0 ? self.meanOfBreathR : 0;\n      }\n      self.color = meanSpectrumOfBreath.getColor(self.meanOfBreathR);\n      if(self.meanOfBreathR) {\n        meanSpectrumOfBreath.soundNotify(self.meanOfBreathR);\n      }\n    },\n    changeConfig(config) {\n      meanSpectrumOfBreath.changeConfig(config)\n    }\n  }));\n\nconst spectrumInfo = SpectrumInfo.create({\n  mean: 0,\n  max: 0,\n  meanOfBreath: 0,\n  meanOfBreathR: 0,\n  timeLeft: -1,\n  color: 'black',\n});\n\nexport { spectrumInfo };\n","import { spectrumInfo } from \"./spectrum-info\";\nimport { windowInfo } from \"./window-info\";\nimport { config } from \"./config\";\n\nconst store = {\n  spectrumInfo,\n  windowInfo,\n  config,\n};\n\nexport { store };\n","import { types } from \"mobx-state-tree\";\n\nconst WindowInfo = types\n  .model(\"WindowInfo\", {\n    sineWaveHeight: types.number,\n    frequencyHeight: types.number,\n    sineWaveWidth: types.number,\n    frequencyWidth: types.number,\n    isInteracted: types.boolean,\n  })\n  .actions(self => ({\n    init() {\n      const windowHeight = window.innerHeight;\n      self.sineWaveHeight = (windowHeight * 0.6);\n      self.frequencyHeight = (windowHeight * 0.3);\n      self.sineWaveWidth = window.innerWidth;\n      self.frequencyWidth = window.innerWidth / 2;\n    },\n    interactWithWindow () {\n      self.isInteracted = true;\n    }\n  }));\n\nconst windowInfo = WindowInfo.create({\n  sineWaveHeight: 0,\n  frequencyHeight: 0,\n  sineWaveWidth: 0,\n  frequencyWidth: 0,\n  isInteracted: false,\n});\n\nexport { windowInfo };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'mobx-react';\nimport { store } from './mobix/store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}