{"version":3,"sources":["components/SinewaveStream/wave-heared.js","components/SinewaveStream/utils.js","components/SinewaveStream/Container.js","components/SinewaveStream/Component.js","components/FrequencyBarsStream/utils.js","utils/getBackgroundColor.js","components/FrequencyBarsStream/Container.js","components/FrequencyBarsStream/Component.js","components/InfoBar/Container.js","components/InfoBar/Component.js","App.js","serviceWorker.js","utils/notify.js","utils/MeanSpectrumOfBreath.js","mobix/config.js","mobix/spectrum-info.js","mobix/store.js","mobix/window-info.js","index.js"],"names":["withWaveHeader","data","numberOfChannels","sampleRate","header","ArrayBuffer","d","DataView","setUint8","charCodeAt","setUint32","byteLength","setUint16","buffer1","buffer2","tmp","Uint8Array","set","buffer","concat","audioCtx","window","AudioContext","webkitAudioContext","analyser","createAnalyser","getByteTimeDomainData","fftSize","arguments","length","undefined","rate","channels","Promise","resolve","decodeAudioData","audioBuffer","source","createBufferSource","connect","bufferLength","dataArray","start","drawWave","canvasCtx","width","height","styles","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","sliceWidth","x","i","y","moveTo","lineTo","stroke","Sinewave","observer","compose","inject","branch","_ref","navigatorMicStream","R","renderNothing","withProps","_ref2","_ref2$store","store","config","spectrumInfo","mic","lifecycle","componentDidMount","_componentDidMount","Object","asyncToGenerator","regenerator_default","a","mark","_callee2","_this$props","canvas","_this","this","wrap","_context2","prev","next","props","document","querySelector","getContext","clearRect","on","_ref3","_callee","wave","_context","sent","stop","_x","apply","mapProps","sineWaveHeight","sineWaveWidth","wavesCount","react_default","createElement","className","getByteFrequencyData","drawBar","barHeight","barWidth","getBackgroundColor","ratting","FrequencyBars","meanOfBreathR","setMean","setMax","alert","frequencyHeight","frequencyWidth","InfoBarContainer","backgroundColor","style","mean","max","meanOfBreath","url","device","timeToListen","minRateDif","InfoBar","location","hostname","port","socket","socketClient","App","windowInfo","withState","init","setUrl","ss","stream","setStream","setMic","padding","Boolean","match","oscillator","notify","createOscillator","type","frequency","setValueAtTime","currentTime","destination","getOscillator","MeanSpectrumOfBreath","classCallCheck","_statOfListen","_isListening","_time","_means","_mean","listen","bind","meanSpectrum","Date","getTime","diffInSec","index","parseInt","push","map","staticConfig","types","model","frozen","number","string","actions","self","create","objectSpread","meanSpectrumOfBreath","spectrum","getMean","windowHeight","innerHeight","innerWidth","ReactDOM","render","index_module","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b38aaa43.chunk.js","sourcesContent":["const concat = (buffer1, buffer2) => {\n  const tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n\n  tmp.set(new Uint8Array(buffer1), 0);\n  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n\n  return tmp.buffer;\n};\n\n\nconst withWaveHeader = (data, numberOfChannels, sampleRate) => {\n  const header = new ArrayBuffer(44);\n\n  var d = new DataView(header);\n\n  d.setUint8(0, \"R\".charCodeAt(0));\n  d.setUint8(1, \"I\".charCodeAt(0));\n  d.setUint8(2, \"F\".charCodeAt(0));\n  d.setUint8(3, \"F\".charCodeAt(0));\n\n  d.setUint32(4, data.byteLength / 2 + 44, true);\n\n  d.setUint8(8, \"W\".charCodeAt(0));\n  d.setUint8(9, \"A\".charCodeAt(0));\n  d.setUint8(10, \"V\".charCodeAt(0));\n  d.setUint8(11, \"E\".charCodeAt(0));\n  d.setUint8(12, \"f\".charCodeAt(0));\n  d.setUint8(13, \"m\".charCodeAt(0));\n  d.setUint8(14, \"t\".charCodeAt(0));\n  d.setUint8(15, \" \".charCodeAt(0));\n\n  d.setUint32(16, 16, true);\n  d.setUint16(20, 1, true);\n  d.setUint16(22, numberOfChannels, true);\n  d.setUint32(24, sampleRate, true);\n  d.setUint32(28, sampleRate * 1 * 2);\n  d.setUint16(32, numberOfChannels * 2);\n  d.setUint16(34, 16, true);\n\n  d.setUint8(36, \"d\".charCodeAt(0));\n  d.setUint8(37, \"a\".charCodeAt(0));\n  d.setUint8(38, \"t\".charCodeAt(0));\n  d.setUint8(39, \"a\".charCodeAt(0));\n  d.setUint32(40, data.byteLength, true);\n\n  return concat(header, data);\n};\n\nexport { withWaveHeader };\n","import { withWaveHeader } from './wave-heared'\nconst audioCtx = new (window.AudioContext || window.webkitAudioContext)();\nconst analyser = audioCtx.createAnalyser();\n\nconst getByteTimeDomainData = (buffer, fftSize = 32768, rate, channels) => new Promise(resolve =>{\n  analyser.fftSize = fftSize;\n  audioCtx.decodeAudioData(\n    // todo: move to settings\n    withWaveHeader(buffer, channels, rate), (audioBuffer) => {\n      const source = audioCtx.createBufferSource();\n      source.buffer = audioBuffer;\n      source.connect(analyser);\n      const bufferLength = analyser.fftSize;\n      let dataArray = new Uint8Array(bufferLength);\n      analyser.getByteTimeDomainData(dataArray);\n      source.start();\n      resolve(dataArray);\n    })\n});\n\n\nconst drawWave = function(dataArray, canvasCtx, width, height, styles) {\n  canvasCtx.fillStyle = styles.fillStyle;\n  canvasCtx.fillRect(0, 0, width, height);\n  canvasCtx.lineWidth = styles.lineWidth;\n  canvasCtx.strokeStyle = styles.strokeStyle;\n  canvasCtx.beginPath();\n  const bufferLength = dataArray.length;\n\n  const sliceWidth = width * 1.0 / bufferLength;\n  let x = 0;\n\n  for(let i = 0; i < bufferLength; i++) {\n    const v = dataArray[i] / 128.0; // byte / 2 || 255 / 2\n    const y = v * height / 2;\n\n    if(i === 0) {\n      canvasCtx.moveTo(x, y);\n    } else {\n      canvasCtx.lineTo(x, y);\n    }\n    x += sliceWidth;\n  }\n\n  canvasCtx.lineTo(width, height / 2);\n  canvasCtx.stroke();\n};\n\n\nexport { getByteTimeDomainData, drawWave };\n","import * as R from 'ramda';\nimport { inject, observer } from \"mobx-react\";\nimport {renderNothing, compose, lifecycle, withProps, branch, mapProps} from 'recompose';\nimport { SinewaveComponent } from './Component';\nimport { drawWave, getByteTimeDomainData } from \"./utils\";\n\nexport const Sinewave = observer(compose(\n  inject('store'),\n  branch(({ navigatorMicStream }) => R.isNil(navigatorMicStream), renderNothing),\n  withProps(({ fillStyle, store: { spectrumInfo, config }}) => ({\n    styles: {\n      fillStyle: fillStyle, // background\n      strokeStyle: 'rgb(0, 0, 0)', // line color\n      lineWidth: 1,\n    },\n    fftSize: 32768,\n    rate: config.mic.rate,\n    channels: config.mic.channels,\n  })),\n  lifecycle({\n    async componentDidMount() {\n      const { navigatorMicStream, fftSize, rate, channels } = this.props;\n      const canvas = document.querySelector('.sinewave');\n      const { width, height  } = canvas;\n      const canvasCtx = canvas.getContext(\"2d\");\n      canvasCtx.clearRect(0, 0, canvas.width, canvas.height);\n      navigatorMicStream.on('data', async buffer => {\n        const wave = await getByteTimeDomainData(buffer, fftSize, rate, channels);\n        drawWave(wave, canvasCtx, width, height, this.props.styles);\n      })\n    },\n  }),\n  mapProps(R.applySpec({\n    sineWaveHeight: R.path(['store', 'windowInfo', 'sineWaveHeight']),\n    sineWaveWidth: R.path(['store', 'windowInfo', 'sineWaveWidth']),\n    wavesCount: R.path(['wavesCount']),\n  })),\n)(SinewaveComponent));\n\n","import * as R from 'ramda';\nimport React from 'react';\nimport { number } from 'prop-types';\n\nconst SinewaveComponent = ({ sineWaveHeight, sineWaveWidth }) => (\n  <div className=\"d-flex flex-row\">\n    <canvas className=\"sinewave\" width={sineWaveWidth} height={sineWaveHeight}></canvas>\n  </div>\n);\n\nSinewaveComponent.propTypes = {\n  sineWaveHeight: number,\n  sineWaveWidth: number,\n};\n\nexport { SinewaveComponent };\n","import { withWaveHeader } from \"../SinewaveStream/wave-heared\";\n\nconst audioCtx = new (window.AudioContext || window.webkitAudioContext)();\nconst analyser = audioCtx.createAnalyser();\n\nconst getByteFrequencyData = (buffer, fftSize = 2048, rate, channels) => new Promise(resolve =>{\n  analyser.fftSize = fftSize;\n  audioCtx.decodeAudioData(\n    withWaveHeader(buffer, channels, rate), (audioBuffer) => {\n      const source = audioCtx.createBufferSource();\n      source.buffer = audioBuffer;\n      source.connect(analyser);\n      const bufferLength = analyser.fftSize;\n      let dataArray = new Uint8Array(bufferLength);\n      analyser.getByteFrequencyData(dataArray);\n      source.start();\n      resolve(dataArray);\n    })\n});\n\n\nconst drawBar = function(dataArray, canvasCtx, width, height, styles) {\n  canvasCtx.fillStyle = styles.fillStyle;\n  canvasCtx.fillRect(0, 0, width, height);\n  canvasCtx.beginPath();\n  const bufferLength = dataArray.length;\n  const barWidth = (width / bufferLength) * 2.5;\n  let barHeight;\n  let x = 0;\n\n  for(let i = 0; i < bufferLength; i++) {\n    barHeight = dataArray[i];\n\n    canvasCtx.fillStyle = styles.strokeStyle;\n    canvasCtx.fillRect(x, height - barHeight / 2, barWidth, barHeight / 2);\n\n    x += barWidth + 1;\n  }\n};\n\nexport { drawBar, getByteFrequencyData };\n","const getBackgroundColor = (ratting) => {\n  if(ratting > 30) {\n    return `rgb(255, ${100 - ratting || 0},  ${100 - ratting || 0})`; // red\n  } else {\n    return `rgb(${155 + ratting}, 255, ${155 + ratting})`; // green\n  }\n};\n\nexport { getBackgroundColor };\n","import * as R from \"ramda\";\nimport { branch, compose, lifecycle, renderNothing, withProps, mapProps } from 'recompose';\nimport { FrequencyBarsComponent } from './Component';\nimport { drawBar, getByteFrequencyData } from \"./utils\";\nimport { inject, observer } from 'mobx-react';\nimport { getBackgroundColor } from '../../utils/getBackgroundColor';\n\nexport const FrequencyBars = compose(\n  inject('store'),\n  branch(({ navigatorMicStream }) => R.isNil(navigatorMicStream), renderNothing),\n  withProps(({ store: { spectrumInfo, config }}) => ({\n    styles: {\n      fillStyle: getBackgroundColor(spectrumInfo.meanOfBreathR), // background\n      strokeStyle: 'rgb(0, 0, 0)', // line color\n      lineWidth: 1,\n    },\n    fftSize: 2048,\n    rate: config.mic.rate,\n    channels: config.mic.channels,\n  })),\n  lifecycle({\n    componentDidMount() {\n      const { navigatorMicStream, fftSize, channels, rate, store } = this.props;\n      const canvas = document.querySelector('.frequency-bars');\n      const { width, height  } = canvas;\n      const canvasCtx = canvas.getContext(\"2d\");\n      canvasCtx.clearRect(0, 0, canvas.width, canvas.height);\n      navigatorMicStream.on('data', async buffer => {\n        const data = await getByteFrequencyData(buffer, fftSize, rate, channels);\n        drawBar(data, canvasCtx, width, height, this.props.styles);\n        store.spectrumInfo.setMean(data);\n        store.spectrumInfo.setMax(data);\n      });\n      navigatorMicStream.on('error', alert)\n    }\n  }),\n  mapProps(R.applySpec({\n    frequencyHeight: R.path(['store', 'windowInfo', 'frequencyHeight']),\n    frequencyWidth: R.path(['store', 'windowInfo', 'frequencyWidth']),\n  }))\n)(observer(FrequencyBarsComponent));\n","import React from 'react';\nimport { number } from 'prop-types';\n\nconst FrequencyBarsComponent = ({  frequencyHeight, frequencyWidth }) => (\n  <canvas className=\"frequency-bars\" width={frequencyWidth} height={frequencyHeight}></canvas>\n);\n\nFrequencyBarsComponent.propTypes = {\n  frequencyWidth: number,\n  frequencyHeight: number\n};\n\nexport { FrequencyBarsComponent };\n","import * as R from 'ramda';\nimport { compose, mapProps } from 'recompose';\nimport { observer, inject } from 'mobx-react';\nimport { InfoBarComponent } from './Component';\n\nconst InfoBarContainer = compose(\n  inject('store'),\n  mapProps(R.applySpec({\n    spectrumInfo: R.path(['store','spectrumInfo']),\n    config: R.path(['store','config']),\n    backgroundColor: R.path(['backgroundColor']),\n  })),\n)(observer(InfoBarComponent));\n\nexport const InfoBar = inject('store')(InfoBarContainer);\n","import React from 'react';\n// import { string, func } from 'prop-types';\n\nconst InfoBarComponent = ({ spectrumInfo, config, backgroundColor }) => (\n  <div style={{ backgroundColor }}>\n  <div className=\"d-flex flex-row justify-content-between\" >\n    <p>Mean: {spectrumInfo.mean} </p>\n    <p>Max: {spectrumInfo.max} </p>\n    <p>MB:{spectrumInfo.meanOfBreath} / {spectrumInfo.meanOfBreathR} %</p>\n    <p>M:</p>\n  </div>\n    <div className=\"d-flex flex-column justify-content-between\">\n      <p>Config:  </p>\n      <p>Url: {config.url} </p>\n      <p>Mic Rate: {config.mic.rate} </p>\n      <p>Mic Channels: {config.mic.channels} </p>\n      <p>Mic Name: {config.mic.device} </p>\n      <p>Time To Listen: {config.timeToListen} </p>\n      <p>Min RateDif: {config.minRateDif} </p>\n    </div>\n  </div>\n\n);\n\nInfoBarComponent.propTypes = {\n\n};\n\nexport { InfoBarComponent };\n","import * as R from \"ramda\";\nimport React from 'react';\nimport { compose, lifecycle, mapProps, withState } from \"recompose\";\nimport { inject, observer } from \"mobx-react\";\nimport ss from 'socket.io-stream';\nimport socketClient from 'socket.io-client';\n\nimport { Sinewave } from './components/SinewaveStream';\nimport { FrequencyBars } from './components/FrequencyBarsStream';\nimport { InfoBar } from './components/InfoBar';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { getBackgroundColor } from '../src/utils/getBackgroundColor';\n\nconst url = process.env.NODE_ENV === 'production' ?\n  `${window.location.hostname}:${window.location.port}` : `${window.location.hostname}:3001`;\nconst socket = socketClient(url);\n\nconst AppComponent = ({ navigatorMicStream, spectrumInfo, config }) => {\n const  fillStyle = getBackgroundColor(spectrumInfo.meanOfBreathR);\n return  <div className=\"container-fluid\" style={{padding: 0}}>\n    {config.mic.rate &&\n      <Sinewave navigatorMicStream={navigatorMicStream} fillStyle={fillStyle} />}\n    {config.mic.rate &&\n      <FrequencyBars navigatorMicStream={navigatorMicStream} fillStyle={fillStyle} />}\n    <InfoBar backgroundColor={fillStyle}/>\n  </div>;\n}\n\nexport const App = compose(\n  inject('store'),\n  mapProps(R.applySpec({\n    spectrumInfo: R.path(['store','spectrumInfo']),\n    windowInfo: R.path(['store','windowInfo']),\n    config: R.path(['store','config']),\n  })),\n  withState('navigatorMicStream', 'setStream', null),\n  lifecycle({\n    componentDidMount() {\n      this.props.windowInfo.init();\n      this.props.config.setUrl(url);\n      ss(socket).on('mic-stream', (stream, { mic }) => {\n        this.props.setStream(stream);\n        this.props.config.setMic(mic.rate, mic.channels, mic.device);\n      });\n    }\n  })\n)(observer(AppComponent));\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","let oscillator = null;\nconst getOscillator = () => {\n  const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n  const oscillator = audioCtx.createOscillator();\n  oscillator.type = 'square';\n  oscillator.frequency.setValueAtTime(2000, audioCtx.currentTime); // value in hertz\n  oscillator.connect(audioCtx.destination);\n  return oscillator;\n};\n\n\nconst notify = (meanOfBreathR, config) => {\n   if(meanOfBreathR > config.minRateDif) {\n    if(!oscillator) {\n      oscillator = getOscillator();\n      oscillator.start();\n    }\n  } else {\n    oscillator && oscillator.stop();\n    oscillator = null;\n  }\n};\n\nexport { notify };\n","import * as R from \"ramda\";\n\nclass MeanSpectrumOfBreath {\n  constructor(config) {\n    this._statOfListen = null;\n    this._isListening = true;\n    this._time = config.timeToListen; // s\n\n    this._means = [];\n    this._mean = 0;\n    this.listen = this.listen.bind(this);\n  }\n\n  listen(meanSpectrum) {\n    if(!this._isListening) return;\n\n    this._statOfListen = this._statOfListen || new Date().getTime();\n    const diffInSec = (new Date().getTime() - this._statOfListen ) / 1000;\n    const index = parseInt(diffInSec, 10) - 1;\n\n    if(index < 0) return;\n    this._means[index] = this._means[index] || [];\n    this._means[index].push(meanSpectrum);\n\n    if(diffInSec > this._time) {\n      this._isListening = false;\n      this._mean = R.mean(this._means.map(R.reduce(R.max, 0)));\n    }\n  }\n  getMean() {\n    return this._mean;\n  }\n}\n\nexport { MeanSpectrumOfBreath };\n","import { types } from \"mobx-state-tree\";\n\nconst staticConfig = {\n  timeToListen: 10, // seconds\n  minRateDif: 30, // %\n};\n\nconst Config = types\n  .model(\"SpectrumInfo\", {\n    mic:  types.frozen({\n      rate: types.number,\n      channels: types.number,\n      device: types.string,\n    }),\n    url: types.string,\n    timeToListen: types.number,\n    minRateDif: types.number,\n  })\n  .actions(self => ({\n    setMic(rate, channels, device) {\n      self.mic = { rate, channels, device };\n    },\n    setUrl(url) {\n      self.url = url;\n    },\n   }));\n\nconst config = Config.create({\n  mic: {\n    rate: 0,\n    channels: 0,\n    device: 1,\n  },\n  url:'',\n  ...staticConfig,\n});\n\nexport { config, staticConfig };\n","import * as R from \"ramda\";\nimport { types } from \"mobx-state-tree\";\nimport { notify } from \"../utils/notify\";\nimport { MeanSpectrumOfBreath } from \"../utils/MeanSpectrumOfBreath\";\nimport { staticConfig } from './config'\nconst meanSpectrumOfBreath = new MeanSpectrumOfBreath(staticConfig);\n\nconst SpectrumInfo = types\n  .model(\"SpectrumInfo\", {\n    mean: types.number,\n    max: types.number,\n    meanOfBreath: types.number,\n    meanOfBreathR: types.number,\n  })\n  .actions(self => ({\n    setMean(spectrum) {\n      self.mean = parseInt(R.mean(spectrum), 10);\n      meanSpectrumOfBreath.listen(self.mean);\n      self.meanOfBreath = meanSpectrumOfBreath.getMean();\n\n      if(self.meanOfBreath) {\n        self.meanOfBreathR = parseInt(100 - (self.meanOfBreath * 100) / self.mean, 10);\n      }\n      self.meanOfBreathR && notify(self.meanOfBreathR, staticConfig);\n    },\n    setMax(spectrum) {\n      self.max = R.reduce(R.max, 0, spectrum)\n    }\n  }));\n\nconst spectrumInfo = SpectrumInfo.create({\n  mean: 0,\n  max: 0,\n  meanOfBreath: 0,\n  meanOfBreathR: 0\n});\n\nexport { spectrumInfo };\n","import { spectrumInfo } from \"./spectrum-info\";\nimport { windowInfo } from \"./window-info\";\nimport { config } from \"./config\";\n\nconst store = {\n  spectrumInfo,\n  windowInfo,\n  config,\n};\n\nexport { store };\n","import { types } from \"mobx-state-tree\";\n\nconst WindowInfo = types\n  .model(\"WindowInfo\", {\n    sineWaveHeight: types.number,\n    frequencyHeight: types.number,\n    sineWaveWidth: types.number,\n    frequencyWidth: types.number,\n  })\n  .actions(self => ({\n    init() {\n      const windowHeight = window.innerHeight;\n      self.sineWaveHeight = (windowHeight * 0.7) / 2;\n      self.frequencyHeight = (windowHeight * 0.7) / 2;\n      self.sineWaveWidth = window.innerWidth;\n      self.frequencyWidth = window.innerWidth;\n    },\n  }));\n\nconst windowInfo = WindowInfo.create({\n  sineWaveHeight: 0,\n  frequencyHeight: 0,\n  sineWaveWidth: 0,\n  frequencyWidth: 0,\n});\n\nexport { windowInfo };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'mobx-react';\nimport { store } from './mobix/store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}