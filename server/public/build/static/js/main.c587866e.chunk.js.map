{"version":3,"sources":["components/SinewaveStream/wave-heared.js","components/SinewaveStream/utils.js","components/SinewaveStream/Container.js","components/SinewaveStream/Component.js","components/FrequencyBarsStream/utils.js","components/FrequencyBarsStream/Container.js","components/FrequencyBarsStream/Component.js","components/InfoBar/components/MicLevelControl/Container.js","components/InfoBar/components/MicLevelControl/Component.js","components/InfoBar/components/RangeSelector/Container.js","components/InfoBar/components/RangeSelector/Component.js","components/InfoBar/Container.js","utils/distance-getter/get-distance.js","components/InfoBar/Component.js","components/InteractWindow/Container.js","components/InteractWindow/Component.js","App.js","serviceWorker.js","utils/soud-notify.js","utils/MeanSpectrumOfBreath.js","mobix/config.js","mobix/spectrum-info.js","mobix/store.js","mobix/window-info.js","index.js"],"names":["withWaveHeader","data","numberOfChannels","sampleRate","header","ArrayBuffer","d","DataView","setUint8","charCodeAt","setUint32","byteLength","setUint16","buffer1","buffer2","tmp","Uint8Array","set","buffer","concat","getByteTimeDomainData","audioCtx","analyser","fftSize","arguments","length","undefined","rate","channels","Promise","resolve","decodeAudioData","audioBuffer","source","createBufferSource","connect","bufferLength","dataArray","start","drawWave","canvasCtx","width","height","styles","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","sliceWidth","x","i","y","moveTo","lineTo","stroke","Sinewave","observer","compose","inject","branch","_ref","navigatorMicStream","R","renderNothing","withProps","_ref2","color","_ref2$store","store","config","spectrumInfo","mic","sinewaveScale","chunkCount","time","withState","withHandlers","changeUrls","_ref3","setImgUrls","imgUrls","url","pop","urls","Object","toConsumableArray","lifecycle","componentDidMount","_componentDidMount","asyncToGenerator","regenerator_default","a","mark","_callee2","_this$props","canvas","interval","_this","this","wrap","_context2","prev","next","props","setImgUrl","window","AudioContext","webkitAudioContext","createAnalyser","document","querySelector","getContext","clearRect","on","_ref4","_callee","wave","_context","sent","setInterval","toDataURL","stop","_x","apply","mapProps","sineWaveHeight","sineWaveWidth","wavesCount","imgUrl","react_default","createElement","className","map","index","src","key","getByteFrequencyData","drawBar","minRateDif","barHeight","barWidth","FrequencyBars","setMean","alert","frequencyHeight","frequencyWidth","MicLevelControl","withPropsOnChange","micRate","socket","emit","parseInt","refreshListening","setMicRate","index_es","icon","faMicrophoneAlt","react_range_lib","step","min","max","values","onChange","renderTrack","children","assign","style","objectSpread","background","getTrackBackground","colors","renderThumb","isDragged","RangeSelector","maxRateDif","setRate","changeConfig","onMouseDown","onTouchStart","ref","InfoBarContainer","distance","ratting","rating","range","Math","round","getDistance","timeLeft","meanOfBreath","mean","meanOfBreathR","InfoBar","InteractWindow","windowInfo","onInteractWithWindowClick","interactWithWindow","onClick","location","hostname","port","socketClient","AppBranch","isInteracted","renderComponent","padding","App","init","setUrl","ss","stream","minBreathTime","setStream","setMinBreathTime","setMic","device","saveSocket","Boolean","match","oscillator","soundStart","createOscillator","type","frequency","setValueAtTime","currentTime","destination","getOscillator","MeanSpectrumOfBreath","classCallCheck","_socket","_statOfListen","_isListening","_time","timeToListen","_minBreathTime","_minRateDif","_lastColorNotificationDate","_lastSoundNotificationDate","_lastSercerNotificationDate","_means","_mean","_maxes","_max","listen","bind","Date","getTime","meanSpectrum","maxSpectrum","diffInSec","push","meanRating","diff","staticConfig","types","model","frozen","number","string","actions","self","setMaxRateDif","create","meanSpectrumOfBreath","spectrum","getMean","getTimeLeft","left","leftMean","newRating","getColor","soundNotify","serverNotify","boolean","windowHeight","innerHeight","innerWidth","ReactDOM","render","index_module","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c587866e.chunk.js","sourcesContent":["const concat = (buffer1, buffer2) => {\n  const tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n\n  tmp.set(new Uint8Array(buffer1), 0);\n  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n\n  return tmp.buffer;\n};\n\n\nconst withWaveHeader = (data, numberOfChannels, sampleRate) => {\n  const header = new ArrayBuffer(44);\n\n  var d = new DataView(header);\n\n  d.setUint8(0, \"R\".charCodeAt(0));\n  d.setUint8(1, \"I\".charCodeAt(0));\n  d.setUint8(2, \"F\".charCodeAt(0));\n  d.setUint8(3, \"F\".charCodeAt(0));\n\n  d.setUint32(4, data.byteLength / 2 + 44, true);\n\n  d.setUint8(8, \"W\".charCodeAt(0));\n  d.setUint8(9, \"A\".charCodeAt(0));\n  d.setUint8(10, \"V\".charCodeAt(0));\n  d.setUint8(11, \"E\".charCodeAt(0));\n  d.setUint8(12, \"f\".charCodeAt(0));\n  d.setUint8(13, \"m\".charCodeAt(0));\n  d.setUint8(14, \"t\".charCodeAt(0));\n  d.setUint8(15, \" \".charCodeAt(0));\n\n  d.setUint32(16, 16, true);\n  d.setUint16(20, 1, true);\n  d.setUint16(22, numberOfChannels, true);\n  d.setUint32(24, sampleRate, true);\n  d.setUint32(28, sampleRate * 1 * 2);\n  d.setUint16(32, numberOfChannels * 2);\n  d.setUint16(34, 16, true);\n\n  d.setUint8(36, \"d\".charCodeAt(0));\n  d.setUint8(37, \"a\".charCodeAt(0));\n  d.setUint8(38, \"t\".charCodeAt(0));\n  d.setUint8(39, \"a\".charCodeAt(0));\n  d.setUint32(40, data.byteLength, true);\n\n  return concat(header, data);\n};\n\nexport { withWaveHeader };\n","import { withWaveHeader } from './wave-heared'\n\nconst getByteTimeDomainData = (audioCtx, analyser, buffer, fftSize = 32768, rate, channels) => new Promise(resolve =>{\n  analyser.fftSize = fftSize;\n  audioCtx.decodeAudioData(\n    // todo: move to settings\n    withWaveHeader(buffer, channels, rate), (audioBuffer) => {\n      const source = audioCtx.createBufferSource();\n      source.buffer = audioBuffer;\n      source.connect(analyser);\n      const bufferLength = analyser.fftSize;\n      let dataArray = new Uint8Array(bufferLength);\n      analyser.getByteTimeDomainData(dataArray);\n      source.start();\n      resolve(dataArray);\n    })\n});\n\n\nconst drawWave = function(dataArray, canvasCtx, width, height, styles) {\n  canvasCtx.fillStyle = styles.fillStyle;\n  canvasCtx.fillRect(0, 0, width, height);\n  canvasCtx.lineWidth = styles.lineWidth;\n  canvasCtx.strokeStyle = styles.strokeStyle;\n  canvasCtx.beginPath();\n  const bufferLength = dataArray.length;\n\n  const sliceWidth = width * 1.0 / bufferLength;\n  let x = 0;\n\n  for(let i = 0; i < bufferLength; i++) {\n    const v = dataArray[i] / 128.0; // byte / 2 || 255 / 2\n    const y = v * height / 2;\n\n    if(i === 0) {\n      canvasCtx.moveTo(x, y);\n    } else {\n      canvasCtx.lineTo(x, y);\n    }\n    x += sliceWidth;\n  }\n\n  canvasCtx.lineTo(width, height / 2);\n  canvasCtx.stroke();\n};\n\n\nexport { getByteTimeDomainData, drawWave };\n","import * as R from 'ramda';\nimport { inject, observer } from \"mobx-react\";\nimport {renderNothing, compose, lifecycle, withProps, branch, mapProps, withState, withHandlers } from 'recompose';\nimport { SinewaveComponent } from './Component';\nimport { drawWave, getByteTimeDomainData } from \"./utils\";\n\nconst n = 2;\nconst time = 15; //seconds\nexport const Sinewave = observer(compose(\n  inject('store'),\n  branch(({ navigatorMicStream }) => R.isNil(navigatorMicStream), renderNothing),\n  withProps(({ color, store: { spectrumInfo, config }}) => ({\n    styles: {\n      fillStyle: 'white', //fillStyle, // background\n      strokeStyle: color, //'rgb(0, 0, 0)', // line color\n      lineWidth: 1,\n    },\n    fftSize: 32768,\n    rate: config.mic.rate,\n    channels: config.mic.channels,\n    sinewaveScale: config.sinewaveScale,\n    chunkCount: time * n,\n  })),\n  withState('imgUrl', 'setImgUrl'),\n  withState('imgUrls', 'setImgUrls', []),\n  withHandlers({\n    changeUrls: ({ setImgUrls, imgUrls, chunkCount}) => (url) => {\n      if(chunkCount === imgUrls.length) {\n        imgUrls.pop();\n      }\n      const urls = [url, ...imgUrls];\n      setImgUrls(urls)\n    }\n  }),\n  lifecycle({\n    async componentDidMount() {\n      const { navigatorMicStream, fftSize, rate, channels, sinewaveScale, setImgUrl, changeUrls } = this.props;\n      const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n      const analyser = audioCtx.createAnalyser();\n\n      const canvas = document.querySelector('.sinewave');\n      const { width, height  } = canvas;\n      const canvasCtx = canvas.getContext(\"2d\");\n      canvasCtx.clearRect(0, 0, canvas.width, canvas.height);\n\n      let interval = null;\n      navigatorMicStream.on('data', async buffer => {\n\n        const wave = await getByteTimeDomainData(audioCtx, analyser, buffer, fftSize, rate, channels, sinewaveScale);\n        drawWave(wave, canvasCtx, width, height, this.props.styles);\n        interval = interval || setInterval(() => {\n            const url = canvas.toDataURL();\n            changeUrls(url);\n          },\n          (fftSize / rate)  * 1000)\n      })\n    },\n  }),\n  mapProps(R.applySpec({\n    sineWaveHeight: R.path(['store', 'windowInfo', 'sineWaveHeight']),\n    sineWaveWidth: R.path(['store', 'windowInfo', 'sineWaveWidth']),\n    wavesCount: R.path(['wavesCount']),\n    imgUrl: R.path(['imgUrl']),\n    imgUrls: R.path(['imgUrls']),\n    chunkCount: R.path(['chunkCount']),\n  })),\n)(SinewaveComponent));\n\n","import * as R from 'ramda';\nimport React from 'react';\nimport { number } from 'prop-types';\n\nconst SinewaveComponent = ({ sineWaveHeight, sineWaveWidth, chunkCount, imgUrls }) => (\n  <div className=\"d-flex flex-row\">\n    {R.range(1, chunkCount + 1).map((index) =>\n      imgUrls[chunkCount - index] && <img\n        src={imgUrls[chunkCount - index]}\n        key={`image-${index}`}\n        width={(sineWaveWidth ) / (chunkCount + 1)}\n        height={sineWaveHeight}\n      />)\n    }\n    <canvas\n      className=\"sinewave\"\n      width={sineWaveWidth / (chunkCount + 1)}\n      height={sineWaveHeight}\n    />\n  </div>\n);\n\n\nSinewaveComponent.propTypes = {\n  sineWaveHeight: number,\n  sineWaveWidth: number,\n};\n\nexport { SinewaveComponent };\n","import { withWaveHeader } from \"../SinewaveStream/wave-heared\";\n\nconst getByteFrequencyData = (audioCtx, analyser, buffer, fftSize = 2048, rate, channels) => new Promise(resolve =>{\n  analyser.fftSize = fftSize;\n  audioCtx.decodeAudioData(\n    withWaveHeader(buffer, channels, rate), (audioBuffer) => {\n      const source = audioCtx.createBufferSource();\n      source.buffer = audioBuffer;\n      source.connect(analyser);\n      const bufferLength = analyser.fftSize;\n      let dataArray = new Uint8Array(bufferLength);\n      analyser.getByteFrequencyData(dataArray);\n      source.start();\n      resolve(dataArray);\n    })\n});\n// todo: do not needed anymore\n// const drawLines = (spectrumInfo, minRateDif, canvasCtx, width, height, styles) => {\n//   canvasCtx.beginPath();\n//   const moveTo = height - spectrumInfo.meanOfBreath;\n//   const withRating = moveTo - (moveTo * ( minRateDif / 100));\n//\n//   const moveToLive = height - spectrumInfo.mean;\n//   const withRatingLive = moveToLive - (moveToLive * ( minRateDif / 100));\n//\n//   canvasCtx.moveTo(0 , withRating);\n//   canvasCtx.lineTo(width, withRating);\n//   canvasCtx.strokeStyle = styles.meanLine.strokeStyle;\n//   canvasCtx.lineWidth = styles.meanLine.lineWidth;\n//   canvasCtx.stroke();\n//\n//   canvasCtx.moveTo(0, withRatingLive);\n//   canvasCtx.lineTo(width, withRatingLive);\n//   canvasCtx.strokeStyle = styles.liveLine.strokeStyle;\n//   canvasCtx.lineWidth = styles.liveLine.lineWidth;\n//   canvasCtx.stroke();\n// };\n\nconst drawBar = function(dataArray, spectrumInfo, minRateDif, canvasCtx, width, height, styles) {\n  canvasCtx.fillRect(0, 0, width, height);\n  canvasCtx.beginPath();\n  const bufferLength = dataArray.length;\n  const barWidth = (width / bufferLength) * 2.5;\n  let barHeight;\n  let x = 0;\n\n  for(let i = 0; i < bufferLength; i++) {\n    barHeight = dataArray[i];\n\n    canvasCtx.fillStyle = styles.strokeStyle;\n    canvasCtx.fillRect(x, height - barHeight, barWidth, barHeight);\n\n    x += barWidth + 1;\n  }\n  // if (spectrumInfo.meanOfBreath) {\n  //   drawLines(spectrumInfo, minRateDif, canvasCtx, width, height, styles)\n  // }\n\n  canvasCtx.fillStyle = styles.fillStyle;\n};\n\nexport { drawBar, getByteFrequencyData };\n","import * as R from \"ramda\";\nimport { branch, compose, lifecycle, renderNothing, withProps, mapProps } from 'recompose';\nimport { FrequencyBarsComponent } from './Component';\nimport { drawBar, getByteFrequencyData } from \"./utils\";\nimport { inject, observer } from 'mobx-react';\n\nexport const FrequencyBars = compose(\n  observer,\n  inject('store'),\n  branch(({ navigatorMicStream }) => R.isNil(navigatorMicStream), renderNothing),\n  withProps(({ color, store: { spectrumInfo, config }}) => ({\n    styles: {\n      fillStyle: 'white',\n      strokeStyle: color, // line color\n      lineWidth: 1,\n    },\n    fftSize: 256,\n    rate: config.mic.rate,\n    channels: config.mic.channels,\n    minRateDif: config.minRateDif,\n  })),\n  lifecycle({\n    componentDidMount() {\n      const { navigatorMicStream, fftSize, channels, rate, store, minRateDif } = this.props;\n      const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n      const analyser = audioCtx.createAnalyser();\n\n      const canvas = document.querySelector('.frequency-bars');\n      const { width, height  } = canvas;\n      const canvasCtx = canvas.getContext(\"2d\");\n      canvasCtx.clearRect(0, 0, canvas.width, canvas.height);\n\n      navigatorMicStream.on('data', async buffer => {\n        const data = await getByteFrequencyData(audioCtx, analyser, buffer, fftSize, rate, channels);\n        drawBar(data, store.spectrumInfo, minRateDif, canvasCtx, width, height, this.props.styles);\n        store.spectrumInfo.setMean(data);\n      });\n      navigatorMicStream.on('error', alert);\n    },\n  }),\n  mapProps(R.applySpec({\n    frequencyHeight: R.path(['store', 'windowInfo', 'frequencyHeight']),\n    frequencyWidth: R.path(['store', 'windowInfo', 'frequencyWidth']),\n  }))\n)(FrequencyBarsComponent);\n","import React from 'react';\nimport { number } from 'prop-types';\n\nconst FrequencyBarsComponent = ({  frequencyHeight, frequencyWidth }) => (\n  <div className=\"d-flex flex-row\">\n    <canvas className=\"frequency-bars\" width={frequencyWidth} height={frequencyHeight}></canvas>\n  </div>\n);\n\nFrequencyBarsComponent.propTypes = {\n  frequencyWidth: number,\n  frequencyHeight: number\n};\n\nexport { FrequencyBarsComponent };\n","import { compose, withState, withPropsOnChange } from 'recompose';\nimport { MicLevelControlComponent } from './Component';\nimport {inject} from \"mobx-react\";\n\nconst MicLevelControl = compose(\n  inject('store'),\n  withState('micRate', 'setMicRate', 100),\n  withPropsOnChange(['micRate'], ({ micRate, socket, store }) => {\n    socket.emit('micRate', { micRate: parseInt(micRate) });\n    store.spectrumInfo.refreshListening();\n  }),\n)(MicLevelControlComponent);\n\nexport { MicLevelControl }\n","import React from 'react';\nimport { getTrackBackground, Range} from 'react-range';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMicrophoneAlt } from '@fortawesome/free-solid-svg-icons';\nimport './style.css';\n\nconst MicLevelControlComponent = ({ micRate, setMicRate }) =>\n  <div className=\"d-flex flex-row\">\n    <p className=\"icon-container\"><FontAwesomeIcon icon={faMicrophoneAlt} className=\"icon\" /></p>\n    <p className=\"indicator\">-</p>\n    <div className=\"range-container\">\n     <Range\n        step={1}\n        min={0}\n        max={100}\n        values={[micRate]}\n        onChange={rate => setMicRate(rate[0])}\n        renderTrack={({ props, children }) => (\n          <div\n            {...props}\n            style={{\n              ...props.style,\n                background: getTrackBackground({\n                    values: [micRate],\n                    colors: ['#000000', '#aaa',],\n                    min: 0,\n                    max: 100,\n                }),\n            }}\n            className='line'\n          >\n            {children}\n          </div>\n        )}\n        renderThumb={({ props, isDragged}) => (\n          <div\n            {...props}\n            className='toggle'\n            style={{\n              ...props.style,\n\n            }}\n          >\n              <div className=\"circle-container\">\n                  <div className={`circle ${isDragged ? 'active' : ''}`}> </div>\n                  <div className={`circle ${isDragged ? 'active' : ''}`}> </div>\n                  <div className={`circle ${isDragged ? 'active' : ''}`}> </div>\n              </div>\n          </div>\n        )}\n      />\n    </div>\n    <p className=\"indicator\">+</p>\n  </div>;\n\n\nMicLevelControlComponent.propTypes = {\n\n};\n\nexport { MicLevelControlComponent };\n","import { compose, withState, withPropsOnChange } from 'recompose';\nimport { RangeSelectorComponent } from './Component';\nimport {inject} from \"mobx-react\";\n\nconst RangeSelector = compose(\n  inject('store'),\n  withState('rate', 'setRate', ({ store }) => [\n    store.config.minRateDif,\n    store.config.maxRateDif,\n  ]),\n  withPropsOnChange(['rate'], ({ rate, store }) => {\n      store.config.setRate(rate[0], rate[1]);\n      store.spectrumInfo.changeConfig({ minRateDif: rate[0] });\n  }),\n)(RangeSelectorComponent);\n\nexport { RangeSelector }\n","import React from 'react';\nimport { Range, getTrackBackground } from 'react-range';\nimport '../MicLevelControl/style.css';\n\nconst STEP = 5;\nconst MIN = 0;\nconst MAX = 100;\n\nconst RangeSelectorComponent = ({ rate, setRate }) => (\n    <div className=\"d-flex flex-row\">\n        <p className=\"indicator\">0</p>\n        <div className=\"range-container\">\n            <Range\n                step={STEP}\n                min={MIN}\n                max={MAX}\n                values={rate}\n                onChange={setRate}\n                renderTrack={({ props, children }) => (\n                    <div\n                        onMouseDown={props.onMouseDown}\n                        onTouchStart={props.onTouchStart}\n                        style={{\n                            ...props.style,\n                            background: getTrackBackground({\n                                values: rate,\n                                colors: ['#aaa', '#000000', '#aaa'],\n                                min: MIN,\n                                max: MAX,\n                            }),\n                        }}\n                        className=\"line\"\n                    >\n                        <div\n                            ref={props.ref}\n                        >\n                            {children}\n                        </div>\n                    </div>\n                )}\n                renderThumb={({props, isDragged}) =>(\n                    <div\n                    {...props}\n                    style={{\n                        ...props.style,\n                    }}\n                    className=\"toggle\"\n                    >\n                        <div className=\"circle-container\">\n                            <div className={`circle ${isDragged ? 'active' : ''}`}> </div>\n                            <div className={`circle ${isDragged ? 'active' : ''}`}> </div>\n                            <div className={`circle ${isDragged ? 'active' : ''}`}> </div>\n                        </div>\n                    </div>)\n                }\n            />\n        </div>\n        <p className=\"indicator\">100</p>\n    </div>\n);\n\n\nRangeSelectorComponent.propTypes = {\n\n};\n\nexport { RangeSelectorComponent };\n","import * as R from 'ramda';\nimport { compose, mapProps } from 'recompose';\nimport { observer, inject } from 'mobx-react';\nimport { InfoBarComponent } from './Component';\nimport { getDistance } from '../../utils/distance-getter/get-distance';\n\nconst InfoBarContainer = compose(\n  inject('store'),\n  mapProps(R.applySpec({\n    spectrumInfo: R.path(['store','spectrumInfo']),\n    config: R.path(['store','config']),\n    distance: R.pipe(\n      R.applySpec({\n        min: R.path(['store','config', 'minRateDif']),\n        max: R.path(['store','config', 'maxRateDif']),\n        ratting: R.path(['store','spectrumInfo', 'meanOfBreathR']),\n      }),\n      ({ min, max, ratting }) => getDistance(min, max, ratting || 0),\n    ),\n    socket: R.path(['socket']),\n  })),\n)(observer(InfoBarComponent));\n\nexport const InfoBar = inject('store')(InfoBarContainer);\n","/**\n* This function return distance in millimeters\n* from RN to point of stimulation by sound spectrum value\n* @name  getDistance\n * @function\n * @param {Number} - min value of RLN reaction (furthest distance)\n * @param {Number} - min value of RLN reaction (closest distance)\n * @param {Number} - rating of breath in a pint of stimulation\n * @param {Number} - distance range from RLN where reaction are possible\n**/\nconst getDistance = (min, max, rating, range = 6) => {\n    if(rating < min ) return null;\n    if(rating > max ) return 0;\n    // step of value that is changing with distance\n    const step = (max - min) / range;\n    const distance = (max - rating) / step;\n    return Math.round(distance)\n};\n\nexport { getDistance };","import React from 'react';\nimport { MicLevelControl } from './components/MicLevelControl'\nimport { RangeSelector } from './components/RangeSelector';\n\n// import { string, func } from 'prop-types';\n\n// use it on dev\nconst ConfigBar = ({ config }) => (\n  <div className=\"d-flex flex-column justify-content-center align-items-center\">\n\n    <p>Config:  </p>\n    <p>Url: {config.url} </p>\n    <p>Mic Rate: {config.mic.rate} </p>\n    <p>Mic Channels: {config.mic.channels} </p>\n    <p>Mic Name: {config.mic.device} </p>\n    <p>Time To Listen: {config.timeToListen} </p>\n    <p>Min RateDif: {config.minRateDif} </p>\n    <p>Sinewave Scale: {config.sinewaveScale} </p>\n  </div>\n);\n\n// todo mic refactor\n\nconst InfoBarComponent = ({ spectrumInfo, config, distance, socket }) =>\n  <div className=\"d-flex flex-column align-items-t flex-fill\">\n    <h1 className=\"text-center\" style={{color: spectrumInfo.color}}>\n      {distance !== null ? `${distance} mm`: '-'  }\n    </h1>\n    <MicLevelControl socket={socket} />\n    { spectrumInfo.timeLeft <= 0 ?\n      <div>\n\n        <div className=\"d-flex flex-column \" >\n          <h3 className=\"text-center\">\n            <small className=\"text-muted\">Spectrum: </small>\n            {spectrumInfo.meanOfBreath} / {spectrumInfo.mean} = {spectrumInfo.meanOfBreathR} %\n          </h3>\n          <h5 className=\"text-center\">\n            <small className=\"text-muted\">Range: </small>{config.minRateDif}  / {config.maxRateDif}\n          </h5>\n          <RangeSelector />\n        </div>\n      </div>:\n      <div className=\"flex-fill d-flex flex-column\">\n        <h1 className=\"text-center\">{spectrumInfo.timeLeft }</h1>\n      </div>\n    }\n  </div>;\n\nInfoBarComponent.propTypes = {\n\n};\n\nexport { InfoBarComponent };\n","import * as R from 'ramda';\nimport { compose, mapProps, withHandlers } from 'recompose';\nimport { observer, inject } from 'mobx-react';\nimport { InteractWindowComponent } from './Component';\n\nconst InteractWindow = compose(\n  inject('store'),\n  mapProps(R.applySpec({\n    windowInfo: R.path(['store','windowInfo']),\n  })),\n  withHandlers({\n    onInteractWithWindowClick: ({ windowInfo }) => () => windowInfo.interactWithWindow(),\n  })\n)(InteractWindowComponent);\n\nexport { InteractWindow }\n","import React from 'react';\nimport { func } from 'prop-types';\nimport './style.css'\n\nconst InteractWindowComponent = ({ onInteractWithWindowClick }) =>\n  <div onClick={onInteractWithWindowClick} className=\"interact-window\">\n    <p onClick={onInteractWithWindowClick}>Tab to Start</p>\n  </div>;\n\nInteractWindowComponent.propTypes = {\n  onInteractWithWindowClick: func\n};\n\nexport { InteractWindowComponent };\n","import * as R from \"ramda\";\nimport React from 'react';\nimport { compose, lifecycle, mapProps, withState, branch, renderComponent } from \"recompose\";\nimport { inject, observer } from \"mobx-react\";\nimport ss from 'socket.io-stream';\nimport socketClient from 'socket.io-client';\n\nimport { Sinewave } from './components/SinewaveStream';\nimport { FrequencyBars } from './components/FrequencyBarsStream';\nimport { InfoBar } from './components/InfoBar';\nimport { InteractWindow } from './components/InteractWindow';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { getBackgroundColor } from '../src/utils/getBackgroundColor';\n\nconst url = process.env.NODE_ENV === 'production' ?\n  `${window.location.hostname}:${window.location.port}` : `${window.location.hostname}:3001`;\nconst socket = socketClient(url);\n\nconst AppComponent = ({ navigatorMicStream, spectrumInfo, config }) =>\n  <div className=\"container-fluid\" style={{padding: 10}}>\n    {config.mic.rate &&\n      <Sinewave navigatorMicStream={navigatorMicStream} color={spectrumInfo.color} />}\n    <div className=\"d-flex flex-row\">\n      <InfoBar socket={socket} />\n      {config.mic.rate &&\n        <FrequencyBars navigatorMicStream={navigatorMicStream} color={spectrumInfo.color}  socket={socket} />}\n    </div>\n  </div>;\n\n\nconst AppBranch =  compose(\n  branch(({ windowInfo }) => !windowInfo.isInteracted, renderComponent(InteractWindow)),\n)(observer(AppComponent));\n\nexport const App = compose(\n  observer,\n  inject('store'),\n  mapProps(R.applySpec({\n    spectrumInfo: R.path(['store','spectrumInfo']),\n    windowInfo: R.path(['store','windowInfo']),\n    config: R.path(['store','config']),\n  })),\n  withState('navigatorMicStream', 'setStream', null),\n  lifecycle({\n    componentDidMount() {\n      this.props.windowInfo.init();\n      this.props.config.setUrl(url);\n      ss(socket).on('mic-stream', (stream, {\n        mic,\n        minRateDif,\n        minBreathTime,\n        maxRateDif\n      }) => {\n        this.props.setStream(stream);\n        this.props.config.setRate(minRateDif, maxRateDif);\n        this.props.config.setMinBreathTime(minBreathTime);\n        this.props.config.setMic(mic.rate, mic.channels, mic.device);\n        this.props.spectrumInfo.changeConfig({ minRateDif, minBreathTime });\n        this.props.spectrumInfo.saveSocket(socket)\n      });\n    }\n  }),\n)(observer(AppBranch));\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","let oscillator = null;\nconst getOscillator = () => {\n  const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n  const oscillator = audioCtx.createOscillator();\n  oscillator.type = 'square';\n  oscillator.frequency.setValueAtTime(2000, audioCtx.currentTime); // value in hertz\n  oscillator.connect(audioCtx.destination);\n  return oscillator;\n};\n\nconst soundStart = () => {\n  if(!oscillator) {\n    oscillator = getOscillator();\n    oscillator.start();\n  }\n};\n\nconst soundStop = () => {\n  oscillator && oscillator.stop();\n  oscillator = null;\n};\n\nexport { soundStart, soundStop };\n","import * as R from \"ramda\";\nimport {  soundStart, soundStop } from './soud-notify';\n\nclass MeanSpectrumOfBreath {\n  constructor(config) {\n    this._socket = null;\n    this._statOfListen = null;\n    this._isListening = true;\n    this._time = config.timeToListen; // s\n    this._minBreathTime = config.minBreathTime;\n    this._minRateDif = config.minRateDif;\n    this._lastColorNotificationDate = null;\n    this._lastSoundNotificationDate = null;\n    this._lastSercerNotificationDate = null;\n\n    this._means = [];\n    this._mean = 0;\n    this._maxes = [];\n    this._max = 0;\n    this.listen = this.listen.bind(this);\n  }\n  saveSocket(socket){\n    this._socket = socket;\n  }\n  changeConfig(config) {\n    this._time = config.timeToListen || this._time; // s\n    this._minBreathTime = config.minBreathTime || this._minBreathTime;\n    this._minRateDif = config.minRateDif || this._minRateDif;\n  }\n  /** Call to refresh listening from scratch */\n  refreshListening () {\n    this._isListening = true;\n    this._statOfListen = new Date().getTime();\n  }\n  listen(meanSpectrum, maxSpectrum) {\n    if(!this._isListening) return;\n\n    this._statOfListen = this._statOfListen || new Date().getTime();\n    const diffInSec = (new Date().getTime() - this._statOfListen ) / 1000;\n    const index = parseInt(diffInSec, 10) - 1;\n\n    if(index < 0) return;\n    this._means[index] = this._means[index] || [];\n    this._maxes[index] = this._maxes[index] || [];\n    this._means[index].push(meanSpectrum);\n    this._maxes[index].push(maxSpectrum);\n\n    if(diffInSec > this._time) {\n      this._isListening = false;\n      this._mean = R.mean(this._means.map(R.reduce(R.max, 0)));\n      this._max = R.mean(this._maxes.map(R.reduce(R.max, 0)));\n    }\n  }\n  getMean() {\n    return this._mean;\n  }\n  getMax() {\n    return this._max;\n  }\n  getTimeLeft() {\n    if(!this._isListening) return 0;\n    const diffInSec = (new Date().getTime() - this._statOfListen ) / 1000;\n    return this._time - parseInt(diffInSec, 10);\n  }\n  /** Change color only after little latency breath of people**/\n  getColor(meanRating) {\n    if(this._isListening) return '#c6c8ca'; //grey\n    this._lastColorNotificationDate = this._lastColorNotificationDate || new Date().getTime();\n    const diff = (new Date().getTime() - this._lastColorNotificationDate);\n    if(meanRating > this._minRateDif) {\n      if(diff >= this._minBreathTime) {\n        return `rgb(255, ${155 - (meanRating + 15) || 0},  ${155 - (meanRating + 15) || 0})`; // red\n      }\n    }\n    return 'black'; //`rgb(${155}, 255, ${155})`; // green\n  }\n  soundNotify(meanRating) {\n    this._lastSoundNotificationDate = this._lastSoundNotificationDate || new Date().getTime();\n    const diff = (new Date().getTime() - this._lastSoundNotificationDate);\n    if(meanRating > this._minRateDif) {\n      if(diff >= this._minBreathTime) {\n        return soundStart();\n      }\n    }\n    return soundStop();\n  }\n  serverNotify(meanRating) {\n    this._lastSercerNotificationDate = this._lastSercerNotificationDate || new Date().getTime();\n    const diff = (new Date().getTime() - this._lastSercerNotificationDate);\n    if(meanRating > this._minRateDif) {\n      if(diff >= this._minBreathTime) {\n        this._lastSercerNotificationDate = new Date().getTime();\n        return this._socket.emit('rln-type', { type: 'nerve' })\n      }\n    }\n    if(meanRating > 1) {\n      if(diff >= this._minBreathTime) {\n        this._lastSercerNotificationDate = new Date().getTime();\n        return this._socket.emit('rln-type', { type: 'muscle' })\n      }\n    }\n  }\n}\n\nexport { MeanSpectrumOfBreath };\n","import { types } from \"mobx-state-tree\";\n\nconst staticConfig = {\n  timeToListen: 10, // seconds\n  minRateDif: 50, // %\n  maxRateDif: 90, // %\n  sinewaveScale: 1.9,\n  minBreathTime: 100 // miliseconds\n};\n\nconst Config = types\n  .model(\"SpectrumInfo\", {\n    mic:  types.frozen({\n      rate: types.number,\n      channels: types.number,\n      device: types.string,\n    }),\n    url: types.string,\n    timeToListen: types.number,\n    minRateDif: types.number,\n    maxRateDif: types.number,\n    sinewaveScale: types.number,\n    minBreathTime: types.number,\n  })\n  .actions(self => ({\n    setMic(rate, channels, device) {\n      self.mic = { rate, channels, device };\n    },\n    setUrl(url) {\n      self.url = url;\n    },\n    setRate(min = staticConfig.minRateDif, max = staticConfig.maxRateDif) {\n      self.minRateDif = min;\n      self.maxRateDif = max;\n    },\n    setMaxRateDif(maxRateDif = staticConfig.maxRateDif) {\n      self.maxRateDif = maxRateDif;\n    },\n    setMinBreathTime(minBreathTime = staticConfig.minBreathTime) {\n      self.minBreathTime = minBreathTime;\n    },\n   }));\n\nconst config = Config.create({\n  mic: {\n    rate: 0,\n    channels: 0,\n    device: 1,\n  },\n  url:'',\n  ...staticConfig,\n});\n\nexport { config, staticConfig };\n","import * as R from \"ramda\";\nimport { types } from \"mobx-state-tree\";\nimport { MeanSpectrumOfBreath } from \"../utils/MeanSpectrumOfBreath\";\nimport { staticConfig } from './config'\nconst meanSpectrumOfBreath = new MeanSpectrumOfBreath(staticConfig);\n\nconst MAX_SPECTRUM_OF_MIC = 100;\nconst SpectrumInfo = types\n  .model(\"SpectrumInfo\", {\n    mean: types.number,\n    max: types.number,\n    meanOfBreath: types.number,\n    meanOfBreathR: types.number,\n    timeLeft: types.number,\n    color: types.string,\n  })\n  .actions(self => ({\n    saveSocket(socket) {\n      meanSpectrumOfBreath.saveSocket(socket );\n    },\n    refreshListening() {\n      meanSpectrumOfBreath.refreshListening()\n    },\n    setMean(spectrum) {\n      self.mean = parseInt(R.mean(spectrum), 10);\n      self.max = R.reduce(R.max, 0, spectrum);\n      meanSpectrumOfBreath.listen(self.mean, self.max);\n      self.meanOfBreath = meanSpectrumOfBreath.getMean();\n      self.timeLeft = meanSpectrumOfBreath.getTimeLeft();\n\n      if(self.meanOfBreath) {\n        /** taking into account that max spectrum of mic can't be > 100, need to calculate how much spectrum of breath\n         *  of stimulation bigger than spectrum of normal breath, from range that left.*/\n        const left = MAX_SPECTRUM_OF_MIC - self.mean;\n        const leftMean = MAX_SPECTRUM_OF_MIC - self.meanOfBreath;\n        const newRating = parseInt(100 - (left * 100) / leftMean, 10) || 0;\n        if(leftMean > left) {\n          self.meanOfBreathR = newRating;\n          self.meanOfBreathR = self.meanOfBreathR > 0 ? self.meanOfBreathR : 0;\n        }\n\n      }\n      self.color = meanSpectrumOfBreath.getColor(self.meanOfBreathR);\n      if(self.meanOfBreathR) {\n        meanSpectrumOfBreath.soundNotify(self.meanOfBreathR);\n        meanSpectrumOfBreath.serverNotify(self.meanOfBreathR);\n      }\n    },\n    changeConfig(config) {\n      meanSpectrumOfBreath.changeConfig(config)\n    }\n  }));\n\nconst spectrumInfo = SpectrumInfo.create({\n  mean: 0,\n  max: 0,\n  meanOfBreath: 0,\n  meanOfBreathR: 0,\n  timeLeft: -1,\n  color: 'black',\n});\n\nexport { spectrumInfo };\n","import { spectrumInfo } from \"./spectrum-info\";\nimport { windowInfo } from \"./window-info\";\nimport { config } from \"./config\";\n\nconst store = {\n  spectrumInfo,\n  windowInfo,\n  config,\n};\n\nexport { store };\n","import { types } from \"mobx-state-tree\";\n\nconst WindowInfo = types\n  .model(\"WindowInfo\", {\n    sineWaveHeight: types.number,\n    frequencyHeight: types.number,\n    sineWaveWidth: types.number,\n    frequencyWidth: types.number,\n    isInteracted: types.boolean,\n  })\n  .actions(self => ({\n    init() {\n      const windowHeight = window.innerHeight;\n      self.sineWaveHeight = (windowHeight * 0.4);\n      self.frequencyHeight = (windowHeight * 0.7);\n      self.sineWaveWidth = window.innerWidth;\n      self.frequencyWidth = window.innerWidth / 2;\n    },\n    interactWithWindow () {\n      self.isInteracted = true;\n    }\n  }));\n\nconst windowInfo = WindowInfo.create({\n  sineWaveHeight: 0,\n  frequencyHeight: 0,\n  sineWaveWidth: 0,\n  frequencyWidth: 0,\n  isInteracted: false,\n});\n\nexport { windowInfo };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'mobx-react';\nimport { store } from './mobix/store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}